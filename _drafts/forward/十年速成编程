十年速成编程 Peter Norvig

我们看到很多《21日学会xxx》、《24小时学会yyy》，没错，编写劣质代码很容易，笨蛋或者白痴可以用21日学会它。

研究人员表明，要花费大约十年的时间来建立一种领域的专业知识，包括国际象棋、音乐创作、电报操作、绘画、钢琴、游泳、网球，以及神经心理学和拓扑结构研究。关键是审视做法：不只是做了一遍又一遍，而是用只是用稍超出你目前的能力的任务挑战自己，尝试它，分析你的表现，这样做后，纠正错误。然后重复。一次又一次。没有真正的捷径。

我的成功菜单

    对编程感兴趣并因乐趣而进行编程，乐趣足以令你愿意为此投入十年或一万小时。

    编程。做是学的最好方法。更准确地， "个人在一个领域的最高成就并不自动地通过增加经验获得，而是投入改进的努力的结果" ，"最有效的学习要求一个适当难度的明确任务、信息反馈和错误的可重复性与可修正性。" 

    与其它程序员交流；读其它程序。这比任何书籍和培训都重要。

    如果你想，在高校待四年。这让你可以找要求证书的职位和更深入地理解这个领域。不然，你也可以自己或在工作中取得类似经历。无论如何，读书是不够的。 "计算机科学教育不会让一个人精通编程，正如研究刷子和颜料不会让一个人精通绘画" 我聘用过的最好程序员只有高中学历；他造出许多优秀软件，拥有一个新闻组，炒股赚了一家夜总会。

    与其它程序员一同参与项目。在一些项目做最好的一个；在一些项目做最差的一个。当你是最好的一个，你可以考验你领导能力和用你的眼光启发别人。当你是最差的一个，你学会他们不喜欢的。

    跟随其它程序员参与项目。理解别人写的程序。看看在没有原程序员时如何理解和修正它。想想如何设计后人容易维护的程序。

    学习半打编程语言。包括强调类抽象的 (如 Java 或 C++), 强调函数抽象的 (如 Lisp 或 ML 或 Haskell), 支持语法抽象的 (如 Lisp), 支持声明规范的 (如 Prolog 或 C++模板), 强调并行的 (如 Clojure 或 Go).

    记得“计算机科学”中的“计算机”。知道执行命令、从内存取字（有或没有缓存缺失）、从磁盘读相邻字和寻道的时间。

    参与语言标准化工作。可以是 ANSI C++ 委员会, 或是决定代码风格用 2 还是 4 个空格缩进。这样, 你会知道别人喜欢什么、如何喜欢、或许一点点为何喜欢。

    尽早脱离语言标准化工作。
    
仅仅看书能走多远？我曾读过各种“怎么”书，但仍然像个新手。30个月后，我读哪些“复习”书了吗？没有，我改为依赖更有用的个人经验。

Fred Brooks在他的文章《没有银弹》指出寻找优秀软件设计师的三步计划：

    尽早系统地识别顶级设计师。

    指派一个职业规划导师负责发展前景和保存档案。

    提供成长中设计师间相互交流和学习的机会。

这假设一些人有成为优秀设计师的素质，只用引导他们。Perlis认为优秀者有超越训练的素质。但它们来自何方，是与生俱来还是通过勤奋建立。也许，每个人都能编程，但只有少数人能做好。
