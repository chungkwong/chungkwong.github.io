对IntelliJ IDEA与Netbeans的个人评价

记得我第一次打开Netbeans已经差不多是十年前，当时我开始Java开发生涯，那时还在只有384MB可用内存的机器（另128MB分给了集显），总觉得很卡。
当时也没怎么用太多功能，只是从此离不开标识符自动补全和文档提示，后来也开始用其它各种补全。
IDE不仅可以提高效率，而且可以显著提高代码质量。
Netbeans静态分析器实时的警告虽然不太起眼，多次让我避免了极难调试的灾难性超距bug。
重构功能使从改名到提取方法安全多了，结果现在变量名和程序结构比之前好多了。
与单元测试的集成和覆盖率插件使我作更多测试，而且可不费吹灰之力地回归测试，因此发现了不小bug，以后改起来也有信心多了。
虽然这些工作全部也可以在命令行用各种工具做，但IDE的方便的集成使它们被更频繁地使用，进入正常的流程，量变造成质变。
与版本管理系统的集成和历史记录使我提交的繁率大幅提高，更敢于做大力阔斧的删改，代码因此清爽多了，不会再把代码注释掉而直接删。
当然IntelliJ IDEA作为被广泛认为最好的IDE也有这些功能，还有更多，界面更精细一点，可惜没有中文广告。


Java的成功催生了庞大的生态系统，这反过来促使了Java平台更大的成功。优秀的工具使Java的地位难以被撼动，其中Java的IDE应记一功。Java作为强类型静态语言使IDE可能有很大作为，而Java IDE现实中变得强大则是投入了巨大努力的结果。
IntelliJ IDEA与Netbeans都是针对Java的主流IDE。虽然Eclipse历史比它们都要老，但Eclipse过于强调插件使它的默认配置并不好用，造成有多少个人就有多少个Eclipse，无从评价，这里只想指出Java初学者最好不要选Eclipse。
Netbeans与Java系出同门，都是Oracle（前Sun）的产品，Netbeans对Java开发的支持自然相当好，自带的调试和性能分析工具都与JVM配合得很不错。
就界面设计，IntelliJ IDEA自然比较清爽和细致，只是部分绝对大小对话框似乎在我的笔记本上有显示问题，Netbeans则用较经典的布局，现在也在三边隐藏了一些面板。
IntelliJ IDEA针对Java的自动补全可以说是无敌的，紧随其后的Netbeans虽然也提供了各种自动补全但细节上还是保守了一点点。另外Netbeans默认用点或快捷键触发自动补全，而IntelliJ IDEA则尽可能自动出现。
个人认为Netbeans比较友好的一点则是默认会弹出javadocs，而在OpenJDK上IntelliJ IDEA即使启用显示javadocs功能似乎也有显示问题。
就静态分析来说，两个IDE都提供了不少有用的检查，但个人认为Netbeans默认启用的检查组合和自动修正更合理，IntelliJ IDEA默认连覆盖equals但不覆盖hashCode都不警告，而Netbeans则会建议自动生成哈希函数。
至于重构功能，IntelliJ IDEA和Netbeans提供差不多功能。在构建系统方面，Netbeans默认用Ant也可以用Maven，IntelliJ IDEA则默认用自己的构建过程。
个人认为，IntelliJ IDEA与Netbeans具有相当的可比性，都是不错的Java IDE，不用太多配置即可形成生产力。前者更为整合，后者更灵活一点。
IDE不仅在提高编码效率和代码质量方面有目共睹，而且降低了编程门槛。如怀特海指出的“文明进步的标志是，我们能够越来越多地不假思索地进行重要的行动”。
现在看来，计算机知识对编程的重要性被严重高估，数学就更没用。十年前，完全没有CS理论背景的我用Netbeans开始Java编程，现在我亲眼见到完全没有CS理论背景的中学生用基于IntelliJ IDEA的Android Studio熟练地写手机App。相反，大批大学生修了很多门课但实际上毫无编程能力（理论能力甚至更糟糕），这说明学校教育有根本性错误，程序员不用了解什么算法，正如画家不用知道颜料的化学成分。
