绿条以外
./img/green_bar.png
JUnit（或TestNG等测试框架）自然是Java程序每天都会用上的标准工具。在IDE上看到这个绿条（或“全部测试通过”）自然让人松一口气。然而测试足够无情了吗？软件开发的启蒙读物让我们问自己这个问题。
对于测试驱动开发的项目，这可能不是正确的问题，因为应该先写测试然后写恰好让它通过的最小生产代码。不过在大家都知道测试驱动开发能有效地提高代码质量的时候，仍然有很多人固执地先写生产代码再测试（连测试都不写的就让他们去死吧）。
现在以一个非测试驱动开发项目为例，说明如何增加测试，以致可能转化为测试驱动项目。
粗略统计一下，这个项目的测试代码竟仅有生产代码的四分之一。
./img/cloc.png
为了找出现有测试的盲区，我们使用覆盖率工具，例如Netbeans插件TikiOne JaCoCoverage。
./img/project_coverage.png
覆盖率报告显示整个项目代码覆盖率只有百分之83，分支覆盖率更低至百分之67
./img/package_coverage.png
./img/class_coverage.png
还可以更仔细地看各类和各方法的覆盖率
./img/method_coverage.png
这里我们看到了哪些代码和分支没有被测试触及，于是可以针对性地加测试
测试的目的在于发现缺陷，但发现缺陷也有其它方法，静态分析器就经常能发现编程上的疏忽。对于没有读过Effective Java的人，静态分析器简直救命无数。
./img/static_analysis.png
比如Netbeans默认的静态分析器和FindBug报的你可能觉得不是问题，例如getter和setter没有Javadocs代码可能更干净易读，但只要发现了一个真正问题也已经很值得。
./img/warning.png
有的人惯性忽略Netbeans默认的静态分析器实时给的黄色下划线警告，其实它们很有用，按alt-enter即会提供自动修正建议，例如覆盖equals但忘了覆盖hashCode时就能替你生成一个可用的哈希函数，非常方便。
./img/TODO.png
一些人喜欢在有问题但暂时改不了的代码旁打注释TODO、FIXME、XXX之类的，记得在发布前改好。总说等以后闲的时候做很可能成为永远的遗憾。
另外，版本管理系统也能帮我们掌握项目质量状况。
./img/code_frequency.png
例如从这张Code frequency图可以看出，增代码量与删代码量的趋势大致一致且增删代码量趋于平衡。粗看还不差，要是在功能固定后代码还持续增加就不是好现象了，因为它大概在用丑陋的方式打补丁。反之不断拋弃则通常意味着精益求精。
有趣的是，我们看到开始阶段增加代码很快，这说明了万事起头易，难的在于坚持下去维护好。当一开始想到做一个软件时，几十个类自然会浮现在脑海中，于是要急不及待地把它们写成代码。直觉大致是对的，但往往不完善。
