======清华梦的粉碎——写给清华大学的退学申请======

2005-09-27 

作者：王垠

===== 清华梦的诞生 =====


小时候，妈妈给我一个梦。她指着一个大哥哥的照片对我说，这是爸爸的学生，他考上了清华大学，他是我们中学的骄傲。长大后，你也要进入清华大学读书，为我们家争光。我不知道清华是什么样子，但是我知道爱迪生和牛顿的故事。清华，大概就是可以把我造就成他们这种人的地方吧。我幼小的脑海里就想象出我能在清华做的事情……我的脸上浮现出笑容。我说我要实现这个“清华梦”。这就是清华梦的诞生。

===== 小小科学家 =====


我相信每个人在小时候都跟我差不多，对这个世界充满了好奇。

鲁迅有他的百草园，我也有我自己的"实验田"。如果说小时候的鲁迅是一个艺术家，那么小时候的我就是一个科学家。这么说可能有人要说我口气太大，张口闭口就是这家那家。然而在我的字典里，"艺术家"和"科学家"并不是什么了不起的人，它们只是贴在人内心的一个标签。如果一个小孩专注于内心对世界的感觉，那么他就是一个艺术家。而我不是。我的大部分兴趣是在了解世界是怎样运转，甚至不惜代价。也许大部分男孩子都是这样。

我小时候住在父母执教的中学里。两间平房，门口有一小块地，妈妈在里面种了一些菜。我们一家三口虽然穷，但是过着宁静舒适的生活。我们在这个地方一直住到上初中的时候。这些房屋记录着一个年幼的科学家的探索和实验，直到它们被夷为平地。

妈妈拒绝让我养猫狗，她说凡是会拉屎的都不养---除了我。所以我小时候就喜欢与蚂蚁作伴。我总是试图用各种各样的办法去了解蚂蚁的生活习性。我可以一整天的观察我家屋檐下的蚂蚁来来去去。看见他们用触须碰一碰，然后各自分头走开，我就会想它们到底说了什么。我在想，能不能用一种方法解开蚂蚁语言的密码。我从书中得知蚂蚁洞里有蚁后，她有很大的肚子。为了一睹芳容，我开始试图水漫金山，把水往蚂蚁洞里灌。我有时一个下午就干这种事情，却没有一次成功看到蚁后。后来才知道蚂蚁是如此精明的下水道工程师，水大部分都渗到地底下去了。可是我不甘心，我开始试用别的办法。比如在洞口放一块糖。可是蚁后架子太大，终究不肯出来，让别人帮她送饭进去。

有人说，这个世界最后不是毁在疯子手上，就是毁在科学家手上。世界上如果只有科学家是很可怕的，比如他们会发明高效的杀人武器。我发现疏松的棉絮可以迅速的燃烧，就想出一种惨绝蚁寰的大屠杀实验。我先把糖水滴在地上，等蚂蚁把那个地方围个水泄不通的时候，铺上棉花，点火……现在想起那些勤劳的小黑头都变成灰烬，我仍然心惊肉跳。他们的灵魂会来找我报复吗？后来这个实验有一个升级的版本用的是浸泡过一种化学药品溶液的纸，文火燃烧，由于燃烧速度慢，杀伤力不大，这个实验可以测试蚂蚁的逃跑路线。我还用活蚂蚁进行过心理实验。首先用破袜子摩擦塑料尺产生静电，然后放在一只正在行走的蚂蚁身后不远处。蚂蚁走不动了，我就开始推测它在想什么，它感觉到什么。它可能会觉得有外星人？但是由于尺子拿开以后，它若无其事继续走，我猜它只是有点纳闷，而不惊慌。但是反反复复几次之后，它明显有罢工的意思，似乎忘了自己要去干什么。后来我又发现蚂蚁被吸到塑料尺上之后会由于带上相同的电荷而被"发射"出去，就像人间大炮一样。注："人间大炮"是日本电视剧《恐龙特急克塞号》里的一种可以把人当作炮弹发射的威力很大的电磁装置。

一点微小的发现，就可以引发大量的探索和实验。这就是我在那个年代的特点。虽然妈妈也逼着我练习书法，绘画，还多次获奖，但我不喜欢这些东西。我似乎生下来就是科学家，不是搞艺术的，不过也许只是妈妈的强迫让我反感了艺术而已。物理是我最喜欢的，因为它让我了解到世界的奥秘。我一般开学前几天就会把物理书上的实验都挑出来，费尽辛苦找到材料实践一番，心里美滋滋的。上学真是快乐！

===== 失之交臂 =====


上了高中，由于课业的压力，我的生活逐渐改变了。为了考上清华大学，我努力的学习。抛下我的毛笔，抛下我用来做实验的蚂蚁，电池和线圈，抛下除了考试科目的一切。在老师眼里我是一个听话的好学生，在妈妈眼里我是一个听话的好孩子。每天早上按时起床，吃一大碗妈妈做的面（为了补充一上午学习需要的体力），然后冲进教室，按照预设的程序开始读书，做练习题。似乎一切都有条不紊，顺利进行。可是……

忽然有一天我发现，我的一切活动都是在纸上进行的，看书，做习题。试卷和复习书让我变得变得麻木。我想这样下去我就不再像爱迪生和牛顿了。于是我开始调皮起来。我不但要做考试的题目，还要做更难的题目。做了物理奥林匹克的题目，接着就想看大学的物理书，接着就想恢复我小时候的实验的爱好。老师辅导自习时经常被我缠住问一些不着边际的问题，那其实是我在实验中发现的问题。终于有一天，在我要求他跟我合作制造一个磁悬浮陀螺的时候，他显示出了不耐烦：“王垠，你让我先回答别的同学的问题好不好？你的问题对考试没有好处。” 我呆住了，启发我让我爱上物理的人，尽然对我说出这样的话。后来想一想，他也是无奈啊，不过我从此再也不想问他任何“超纲”的问题。

高二的时候妈妈就拿回一份前一届的高考题让我做，我随手一做就得了一个当时可以考上清华的成绩。我的心里想，清华我来了。明年的这个时候，我就会拿到录取通知书了！从此我就不再把高考放在眼里。我开始钻研越来越难的题目，进行越来越离谱的实验。我想，清华里面应该都是我这样的学生吧，我会有很多志同道合的朋友，不用再跟这群只会做题的呆子在一起了。

可是我的行为总是受到老师的压制，他们要把我们变成考试的机器。他们告诉我，沉下心来做习题，考试才能有把握。妈妈也帮着老师劝导我。看，一班的某某某这次模拟考试数学成绩比你高，多努力一下吧。我哪里听得进去，我才不在乎这点分数，我能解决更难的问题，老师都没法解决的问题。我开始有了逆反心理，开始早上懒床，装病请假不去上课。班主任，校长多次找我谈话，说我要沉下心来准备考试云云。但是我根本就听不进去，我鄙视高考，觉得他们没有资格出题来考我。然后我就有了心理疾病，大概是强迫症。高考语文的时候我居然怀疑监考老师认为自己在作弊，接着好像真的怕被抓住了一样，手发抖，头冒汗。然后我又想要是考不好，以前的优秀会不会也被人怀疑？他们会不会以为我以前的成绩全都是作弊得来的？手就抖得更厉害了。这时候，监考老师可能发现了我的情况，真的走了过来，站在我身后。害得我好几分钟不敢写一个字，因为手已经完全不听使唤。不过他还是走开了，这可怕的高考终于结束了。

我们是考试前填的志愿，我根本不考虑其他学校就只填了清华。后来妈妈研究了一下，帮我添了一个天津大学在第二志愿。以下的志愿全部空白。大家觉得我真够大胆，可是我的心理状态让我发挥完全失常，比清华的最低分数线还差两分。特别是语文，才96分。天津大学第一志愿收满不要我。昔日的好学生，居然到了落榜的下场。我真的那么好吗？我问自己。我太骄傲，才落到如此地步吧。我开始怀疑自己是否应该那样瞧不起高考。看着爸爸的愁眉苦脸，妈妈的唠唠叨叨，真是生不如死。复读吗？那会是噩梦的继续。我不能再在这个学校待下去。再面对题海，我的心理疾病会让我自杀的。碰巧四川大学来招收高分落榜的学生，还给了我随便选择专业的机会。妈妈说，计算机现在很火热，出来好找工作。我虽然对工作不感兴趣，但是我比较喜欢写程序，于是就进了川大计算机系。

===== 两度退学失败 =====


不能不说进川大是个没有选择中的好选择。大学生活自由一些，我至少不会走上自杀的道路。可是我的毛病仍然在继续，我永远不满足学校里能学到的那么点东西。老师基本是照本宣科，我逐渐不再满足这种知识灌输式的教育。我觉得完全没必要上这个大学。

川大的环境我实在无法忍受。军训的时候受够了同学和教官的委屈，我就想退学。我们的军训是在一个戒备森严的炮兵基地里，心里的苦向谁说啊！有一天我们正在路上齐步走的时候，我忽然看到一个女人挽着一个军官走了过来。那个军官的老婆怎么长的这么像我妈妈！要是妈妈来到我身边该多好！没想到回到营地，团长（原来是连长，我们来军训他就升一级做团长了）说有人来探访。我走过去，居然发现是妈妈！因为听说我想退学，她急忙向学校打听了军训的地点，几经周折跑过来，是那个军官带着她混进来的。我想我妈妈要是转行当间谍一定是个好料子。她说已经帮我办了退学，学校同意了，回去好好复习，准备考上清华…… “好好复习，好好复习”……我的脑海里又浮现出高三的情景，这次我要跟一群更没用的复读的人在一起。脑子一阵疼痛之后，我说：“妈妈，我不想退学了。”

可是军训回到学校，发现宿舍如此差劲，我又想退学。妈妈又来帮我办理手续，可是结果我还是由于懦弱反悔了。害得学校办事的老师都骂我： “你这个人简直神经病！” 对啊，我确实是有病，不过我的是精神病，不是神经病。我恨我的高中，我恨我的大学，我恨高考，我恨中国的教育！是你们让我生病的。可是妈妈，她为了我已经费尽了辛苦。我不能再这样周折下去。我自己在学校里好好努力，准备考上清华的研究生吧。

学校住宿环境很差劲，又经过好多麻烦事，我终于决定在校外去租房子住。后来我开始玩滑板，它让我变得勇敢。我心里逐渐平静下来，可以用心看书了。大二以后，我的学习生活才逐渐进入正常，自信开始恢复。

===== 梦的复苏 =====


记得川大教Pascal语言的老师第一堂课就对我们说：“我们学校就是落后啊。外面公司里都用C, C++了，我们还在教Pascal。你们以后要出去工作恐怕还是得学学VC什么的。” 于是有的同学开始抱起一本本像“XXX圣经”之类的书开始学习，上数学课也在看这些东西。我当时自愧不如啊。自己就是小学的时候玩过一下学习机，可以说没有任何计算机基础。辅导员也经常夸他们几个动手能力强，以后公司就需要这样的人。他们出口就是Bill Gates, 世界首富云云。军训的时候听着他们说什么DOS, 温95，我就只有张着嘴崇拜的份了。才想起我高中计算机竞赛的时候一道有关DOS命令的题没有做出来，现在听他们说才知道原来DOS是个“操作系统"。那操作系统又是什么，他们说每个电脑上都必须有一个操作系统……我真是愧不如人 -_-!

正在我决定鼓起勇气后来跟上，准备拿起一本DOS大全从头啃起的时候，一次偶然的机会我接触到了Linux。后来又因为The Art of Computer Programming，接触到了Knuth。我才发现，课堂上讲的那些东西原来如此低级，有些东西学了就过时，学它干吗？我并不比别人落后多少。我一再的思考，什么是计算机科学？是什么让我们计算机系的人不同于其他系的。我有时候认为有了答案，但是后来答案又被我自己推翻。在思想的混乱中，我发现我逐渐摆脱了旁人的标准。我不再想像别人那样去考计算机等级考试，对微软的认证也不屑一顾。我自己学会了Linux，还会很多种当时别人听都没听说过的计算机语言。我学会了LaTeX，还因为找出Knuth书里的错误得到两张支票和一些礼物。这并不是什么值得炫耀的，但是这给我对计算机的兴趣很大鼓舞，我从此更加认真的看书。上课要不就逃掉，背地里拿着大部头的“龙书”之类的原版英语书啃。要不就看我打印出来的GNU的一些资料，完全不听老师讲。期末划重点的时候也不去，考试却总能考个八九十分。总有几个女生排名在我上面，不过我不在乎这点分数，考试和分数不再能评价我。同学们大概都觉得我是一个怪人，后来毕业了我才听他们说，他们管我叫“怪才”。我如此努力的学习着，对别的事情充耳不闻。我只有一个目的，就是毕业就离开这个鬼地方，进入清华大学上研究生。虽然大家不理解我在干什么，清华的老师应该挺在乎我学的东西吧。

可是我没有想到，在我死啃书本的时候，我的创造力正在离我远去。在我盲目接受我认为高深的材料的时候，我失去了自己的创造。我成了比别人稍微好一点的技术工人，不再跟爱迪生和牛顿是一类人了。我高中的时候拼命想保存的创造力已经在苦读之下消失殆尽。我看书的方式变得顺序化，总想从头看到尾。我的高中老师们的目的，中国教育的目的，终于快达到了。

===== 清华，我来了 =====


大三的暑假，我来到清华想拿一些考研的资料。这是我梦中的地方呀，美丽的校园，比川大要大上好多倍吧，脚都走痛了才走到招待所。去系办，一个办事员态度很不好的给我一份资料。哎，学校好，人脾气就该大啊。忍了吧，要是真能考进来就好了。

后来听一个老师说清华有一种学生叫“直博”，可以硕博连读，五年拿到博士学位。只要面试通过就可以进来学习。我心想这种方式好啊，我平生最讨厌的就是考试了。出高考题的那帮人，他们有什么资格考我！考研资料也是遍地飞。写了几本复习材料就自称什么“一代名师”，我最看不起这种人了，就会赚钱。我如果可以获得“直博”的名额，就可以永远摆脱他们了。想一想，要是硕士三年，博士三年，就要六年。现在五年就可以拿到博士学位，还不用考试，真是太好了。可是我又有什么资格获得清华的直博？我在川大从来没听说过这种东西。

于是我就开始打电话联系老师，跟他们谈谈。面对他们的眉头，面对他们的笑脸却无可奈何的说“没有名额”，我都感觉没什么希望了。一个院士甚至对我说：“你们四川大学是什么学校？二流都算不上，最多算个三流大学。你怎么能来我这里！” 我深受打击，可是我还是没有放弃。最后我找到了一个老师，我们一开始就谈的挺投机。他听说我跟Knuth有过联系，挺高兴的说，哦我知道他，好多年前来我们这里做过报告呢。我终于觉得找到了知音，于是决定就跟着他学习。老师找好了之后还有一个面试，是别的老师参加的，我说什么他们似乎没有认真听，就一个劲看我的考试成绩这种我不屑一顾的东西。我面试时特意穿上了Knuth送我的MMIX T-shirt，他们大概根本不知道是什么，我也没有提起。

不过老师只对我的体育成绩提出了疑问，说你怎么才80多分？你的身体能不能胜任繁重的学习任务啊？我笑着回答，我每天还跑5000米呢，我们学校打分比较严，难道清华的学生体育都考90？面试就这样通过了。

===== 推荐信与散伙饭 =====


面试通过后回到学校还要办一些手续。成绩单，推荐信等等，跟申请外国大学研究生院差不多，让我感觉挺正规的。院长对我挺好的，同意帮我签推荐信。可是签完字之后他对我说：“你别以为他们觉得你是个人才。他们是根本招不到人！他们那里像你这样的学生都出国了，剩下的是最差的。谁想读博士啊？你别太高兴了。” 我笑着应付这突如其来的打击，在心里却不断为自己的选择辩护。清华一定是好样的，不会让我失望。它是我的梦啊。

很多麻烦的手续之后，终于拿到了我梦想的大学的录取通知书，可以离开川大这个鬼地方了。毕业的散伙饭上，看着大家喝得酩酊大醉，还有人在咆哮说居然连川大的文凭都没拿到，我一个人默默地想象着即将到来的清华的快乐生活，暗自庆幸。

散伙饭到了尾声的时候，我诧异的看到一个平时不太熟悉的同学拿着一杯啤酒走过来。我挺紧张，我最不喜欢别人给我敬酒了，说是客气，其实很虚伪。没想到他说：“我敬你一杯，大牛人。听说你被清华大学录取作了博士。我干了，你随意。” 我不知如何回答，我一向不知如何应付别人的恭维。还好他没有让我也干杯，倒是够尊重人。没想到喝完他接着说：“我知道你是怎样的人。我很仰慕你，你是真正喜欢研究的人。可是我要告诉你，清华的人并不会比我们好多少。大部分人也只是想混一个学位，将来找个好工作。没有多少人可以跟你一起研究的，你去了必定很孤独。我就很奇怪你这样的人怎么不出国呢！你会后悔的。”

我有点不高兴了。一个人说你的选择是错误的，你的反应是什么呢？反正我当时为我的“清华梦”作了一番辩护，说我进去自己好好研究，应该还是能够很好的，毕竟这是我从小的梦啊。可是没想到，他说的居然是对的，我现在开始感谢他了。
===== 计算几何，创造力的复苏 =====


清华还是一样的上课方式，大部分课也是很多人一起上，一起打瞌睡。老师也是照本宣科，我居然发现他们其实跟川大的老师没什么区别。清华的不同之处就是，一到考试的时候原来进行的一切娱乐活动都不见了人影。原本每天晚上都有人一起玩轮滑，考试的时候就只剩下我孤零零的一个人。因为大家都怕考试，开始熬夜复习了。还有就是上课不容易逃课了，有些老师会突然点名，缺席会严重影响最后的成绩。

对于博士生，传说还有一个规定，那就是后10%淘汰。也就是说，不管你成绩如何，如果成绩排名在课程的后10%，那么就要重修。而如果两门功课重修，就会被开除。面对如此残酷的规定，很多同学都惶惶不可终日。我就是在隔壁同学的唠叨声中度过了第一期。不过我还是没有把考试当回事，所以我也没有去验证这个说法的官方真实性。我仍然不去听老师划重点，我仍然不觉得老师出的题目有什么好，我仍然讨厌有人让我们用手算矩阵。可能觉得太残酷，还是觉得要是开除了博士生谁来干活，这条规定后来改成了如果博士生上了80分就可以不重修。我也不知道为什么我觉得考砸的科目也上的了80，故意放我过去的吗？

但是我的生命中出现了这样一门课程。它改变了我对老师的看法，让我觉得上课原来也可以如此有趣。这就是计算几何。上课的人很少，只有十来个人。因为听说这门课很难，很多同学都没有选。但是我就是那种知难而进的人。老师上课的方式跟别的课程很不一样，大家坐在一个小教室里，老师有精美的幻灯片，有动画，不时还插入一段大科学家，大哲学家的名言。上课时老师会停下来很多次让学生提问题，下课大家都积极踊跃的讨论新奇的问题。课程的评分方法也很特别，平时成绩占到30%的分量，作业分为几种分值，可以自己选择做不做，作业的总分数乘以30%，加上最后大作业的分数乘以70%，就是最后的得分。说真的，这门课太有趣了，我就只逃过一次课。但是还是有时候人数不到一半，因为其他课程压力太大，有人都去复习别的课程了。但是邓老师从来不点名，还对逃课的同学表示同情。还问我们在座的有没有其他课特别紧张的，下次课可以不来。真是让人感动。

我就是在这门课上认识了王益，我们亲密无间的合作，让我领略到了什么叫做研究。大作业的时候我们在一个小组，其实是三人一组，但是那第三个人其实什么也没干。我和王益决定写一个3D的Voronoi图扫描算法演示程序。王益的3D图形编程能力很强，所以他做界面，由我负责算法生成数据作为后端。我们分别在自己的机器上编写程序，不时的打电话讨论接口的设计问题。我找到了Bell labs 的 Steven Fortune 的算法程序，决定看懂它，然后改造成演示需要的分部运行的算法。但是 Fortune 的程序几乎没有注释，而且使用了一种奇怪的数据结构，很难理解。Fortune 还在程序里说到，这个算法虽然有效，但是对于程序员来说是一个挑战。所以我email请他给我一份算法论文的拷贝，他同意了。但是一个月之后，信才到我手里，那时我们已经完成了作业。因为我花了一个星期看懂了他的程序，还换掉了他的麻烦又低效的数据结构。随后成功的把后端与王益的前端设计好接口联合。等我看到 Fortune 的论文，发现程序里面其实已经改进了论文的核心内容。其中的parabolic transformation其实完全没有必要实现。我深深体会到实践的重要性，也许先有了他的论文我反而会被误导，写不出实际可以运行的程序。

由于我们的团结努力，老师对我们的大作业非常满意，他给了我们最高的分数 100。由于我们两个都在课下超额完成作业，所以总的分数我们两个都是满分。这是我阔别已久的100分。只有在小学我才拿到过这种分数啊！对于一个对考试成绩满不在乎的人，100 又意味着什么？如果是别的课程我会毫不在乎，就像我得了80分一样。可是这个100分是我们团结研究而来的，它包含了对我们的合作意识，对我们的友谊，对我们的热情的肯定。虽然我觉得我们的东西还有改进的余地，但是我接受这个100分！也只有这样的课程，我才可能得100分。

从此我感觉到了什么叫做研究。这跟我小时候干的那些事情没有什么两样。你在身边发现一个问题，想知道为什么。然后你就想去获得解决这个问题的知识。你去看书，你去问专家，你上网去搜索。如果没有发现答案，那么好啦，你就可以自己试图去发现为什么，这是最有趣的部分。知道了为什么，就想让这个东西有用处，对人们的生活产生好处。这就是研究。

===== 《完全用Linux工作》与TeX的推广 =====


这么说来我还是对清华有些好感。遇到一个好老师让我从呆头呆脑的技术工人的状态恢复过来，开始追求自己的梦想。可是第一年把所有的课程上完之后，我就发现原来清华所谓的“研究”是如此混沌。其实清华大部分人进行的所谓的“研究”是什么呢？其实就是写作，不是科学研究。这一点以后我会详细叙述。

远远看去外观华丽的有着先进的工作站的实验室，却没有可以安心看书的地方。机器挨着机器人挨着人，书都没地方放。师兄师姐们都在忙着用 word写论文，不时有两个人隔着几行机器大声谈话。实验室通风不好，还有一个大型工作站在嗡嗡作响，我进去一会儿就觉得头晕，所以后来就不想去了。PC 机以前都是公用的，每次都会用不同的机器，却没有我想用的软件，麻烦死了。好不容易实验室买了新机器分配给个人，装上一个 Linux 系统开始写程序，还在Sun工作站上安装了多达1G的GNU程序。却被一个师兄嘲笑说那种跟DOS一样落后的东西你居然也用。于是我写了一篇文章叫做《完全用Linux工作》，放在主页上驳斥这种观点。矫枉过正，确实写的优点偏激，结果引起网上linux界轩然大波。后来我又发现几乎全校的论文都是 word排版的，那些公式质量太差，看起来头痛，才发现很多学生害怕数学的原因之一。所以又写了文章宣传 TeX，希望中国产生更多漂亮的数学书。这下子我出名了，真没想到，出名不是因为我的研究成果，而是因为这些业余的东西。我起初不希望我因此出名，但是看到旁边的人都用上了 TeX，我觉得我还是做了一件好事，至少让论文看起来漂亮了一些。

可是论文的内容，却是我永远的痛！

===== 培养计划 =====


我在第一年就把功课全部上完了。本来我想多选几门课，比如法语，可是清华的博士要选课需要提交一个“培养计划”给导师签字。导师同意之后才能修改。导师看到我选了法语，就说这个第二外语还是自己学学就行了吧，旁听也行啊，我主要是怕你课太多了考试不通过就麻烦了。我当时没有说什么，就把法语去掉了，只留下刚够学分的课程。其实我还想选很多的，体育，音乐什么的，都不好意思跟导师说。后来才知道宿舍对门的硕士生选了钢琴课他们导师都不管。为什么我们就受到如此待遇？

可是没有把法语加到培养计划却成了我的遗憾。有一个新学期我去旁听了第一节法语课之后老师就说，我知道很多同学是来旁听的，这样教室里人太多了，效果不好。这对自己对大家都不好，下次请旁听的同学不要来了。我脸皮薄，下次就没有去了。后来自己想自学却又没有老师教，看了十集reflet之后就此作罢。

后来我终于明白了，清华不需要全面发展的博士生，而其实导师还会在某种程度上削弱学生的能力。导师并不是真的为我们好，而是不喜欢我们上课，因为上课不但会花掉研究（或者干活）的时间，而且让他们眼界太开阔，这样学生会很容易有别的选择而走掉。所有的活动：助教，实习，都必须有导师签字。而大部分导师就会找借口不让学生干这些事情。不给他们助教和实习的机会，让他们以后不好找工作，只能为自己服务，或者为自己的熟人服务。甚至这次我去西藏，要办边境证都要有导师签字。办事的老师说，没有导师签字，你跑出去了不回来怎么办？大妈，我跑那种地方干吗？

除了这些，还有两大法宝就是博士学位和违约金。清华的博士学位有多值钱知道吗？不知道？那么博士退学要交几万块钱的违约金，这下大部分穷苦学生怕了吧。这就是你们的卖身契。清华就是这样把研究生牢牢地控制在自己的掌握之下。我对一个如此害怕学生跑掉的不自信的学校还能说些什么？如果你是好样的，就不会害怕我们跑掉！该跑掉的最后终究会跑掉。

===== 我的自我培养 =====


在学习上，我永远是个吃不饱的人。选不了课，我就去旁听。旁听后觉得老师讲的不好，我就自学。在我有空的时候，我就会去图书馆借书看。在我本科的时候，我就已经发现自己的一个特点，我会很快发现新的东西，并且学会使用它。虽然这些东西并不是创新，但是它们丰富了我的技能，让我有更大的能力去进行创新。我经常顺藤摸瓜似的从一个问题搜索出一大串我想知道的东西。然后借一大堆书回来，每本看一点点，只为找到我需要的答案。

计算几何课的一次作业，我为了写一个算法的演示程序，花了3天时间学了一点Java语言，正好能够完成那个程序。我开始接触到TeX的底层细节，看完了The TeXbook，并且找出一道练习题答案的错误。开始移植gbkfonts程序，作为我的CWEB语言的练习。看完了几乎所有 Xlib 的手册，了解了 XWindow 的工作原理。我接触到 Scheme，并且做完了 SICP 的大部分习题，还自己想出好多问题用Scheme实现算法。后来花了好几个晚上，把MIT课程6.001的录像下载回来。我才发现教授上课可以如此搞笑有趣，上课时戴上巫师的帽子，做一些滑稽的表演。我终于明白，有的计算机科学家居然可以去好莱坞演电影 :) 这个课程让我领会到 LISP 的强大，改变了多年以来对这种古老语言的误解。它让我感觉到在看似纷繁复杂，不断更新的计算机语言的世界，还有那么一种永恒的美！接着我又学会了 Common LISP，并且开始用它来设计研究计算几何的一个函数库。另外还找了一些希奇古怪的程序来玩，写了一些心得体会放在网上给别人看。

我意识到自己数学还不够强，甚至有些怕，就开始看一些数学方面的书。Concrete Mathemtatics, What is Mathematics?, Science and Hypothesis, Godel Escher Bach, ... 虽然每一本都没有看完，但是我逐渐相信自己的数学能力，发现数学原来如此有趣，并不是做习题那么枯燥，也不像一辈子就拼命证明一个定理那么清高。才发现国内很多数学书用难看的符号把学生吓倒了，其实想通了就是很直观的原理。

我看了电影 A Beautiful Mind 之后深受感动，就去买了一本原著的书，它是数学天才John Nash的传记。它描写了20世纪初的Princeton，一群科学家生活的情景。我眼前浮现出在一个房间里，一群人在喝茶聊天下棋讨论问题激烈争论。我发现我从小内心向往的，就是那样的地方。我看到Nash是如何用“头脑暴力”解决一个他没有任何基础知识的问题。原来只要有了问题和探索的精神，就会有动力去获得解决它所需要的知识，最后将问题解决。发现有用的，重要的问题，而不只是寻找困难的问题，这样才会对人类有价值，才会有动力。我还看到一个真正的数学天才是怎样的喜欢恶作剧，又怎样因为过度的傲慢狂妄，想向世人证明自己的天才而发疯。我发现世界上有远比科学更宝贵的东西。我开始悔悟我高中时对待成绩不好的同学的态度。我不是一个天才，但是我要做一个好人。

但是我的研究却没有多少进展，至少我自己这么认为。我发现问题的根源，就是没有真正的讨论，没有真正的问题。

===== 我们也有讨论，原来是这个样子 =====


上完课，就该开始搞研究啦。可是研究什么呢？老师给我几篇论文看，意思是让我看看有没有什么想法。

我开始感觉没有头绪，就跟导师说能不能找师兄师姐跟我讨论讨论，还有别的人在做这个吗？他说，就你一个人做这个，每个人做一个题目，独立思考，这就是研究。我觉得是啊，我应该独立思考。可是过了一段时间发现不行啊，我想实现一个想法，但是我不知道是不是已经有人试过失败了。实验的时间开销会比较多，所以我想知道那么多厉害的人，为什么都不用这种明摆在那的方法？当我再次提出需要讨论的时候，他似乎有点生气的说：”你为什么总是想有人跟你做一样的东西啊？你不是想抄袭别人的论文吧？” 我不发话了。继续做我的实验，结果确实不理想。虽然自己实践很重要，可是要是能利用别人的经验，何乐而不为呢？这并不是偷懒。如果有人讨论，很多时候一个人提出一个问题，另外的人可能就会告诉他这个问题是不是有人做过，有什么重要性，凭直觉告诉他有什么难度。可是如果没有讨论，连问问“有没有人做过”的机会都没有！

后来我就经常上网看看国外的大学怎么搞研究，发现他们都有 seminar，讨论组。A Beautiful Mind 描述的 Princeton 以前的天才们每天都在一个地方喝茶，讨论问题，争得面红耳赤，回家分头思考，做实验，第二天喝茶时再讨论。那就是我从小梦寐以求的生活啊！计算几何课已经让我爱上了与人合作和讨论的方式，现在却孤零零一个人了。我必须告诉导师，合作和讨论是非常重要的。在我据理陈述之后，他说：“好吧。反正师兄师姐各自有自己的事，你要讨论什么就跟我和你副导师讨论吧。” 于是我就开始了跟他们两个星期一次的见面讨论。每次讨论都感觉他们不知道我在说什么，他们心里想的都只是这个能比别人的好多少呢？能不能投到这个会议呢？如此宏观。我觉得跟他们讨论完全是浪费时间。

后来课题逐渐有了新的同学加入，导师决定跟中科院数学所的人一起申请一个项目来研究。于是我们每两个星期去中科院讨论。不过感觉他们那边也差不多。中科院的老师觉得他们的研究太理论，期望我们能给他们带去一点实际的东西。可是我们也没有什么实际的东西，所有的问题都是从别人的paper里看到的。副导师就开始跟他们说这个问题有多么多么重要…… 他们也借此机会开始研究以前放下的一些问题。总之讨论的感觉就是没有目的，没有主题。有时有人说他在想一个什么问题，说了一会儿就被否决了。有时候就是一个人看了一篇paper之后做一个感想。我坐在那里就在想，我们到底在干什么？我们甚至都不知道什么东西值得研究，还研究什么？后来师弟师妹们就开始考虑把问题变一变，看看能不能产生新的问题。他们的做法，我跟他们开玩笑说就是“有问题也要解决；没有问题，制造问题也要解决！” 他们笑着点点头，“本来就是这样嘛。没办法啊。”

博士生论坛的时候，同学们都觉得有类似的问题，讨论不足，交流不足。所以我提议成立一个类似国外大学的 Common Room，用来讨论问题。可是大部分老师说：“这样一个房间，天天都要有那么多人在里面待着。谁来出这个钱？” 是啊，老师自己的办公室都要钱，哪里可能有什么 Common Room？就算有了 Common Room，在里面讨论的无非还是文章发到哪里的问题。制度决定了行为，我的设想太理想化了。

分析一下，为什么老师不提倡讨论呢？因为问题是有限的。老师辛辛苦苦这么多年搞来搞去都在搞这些问题，分配给你们每人一个，互不冲突。要是两个人都搞一个问题，这下好了。出了成果论文归谁？学校要求必须第一作者才算论文数。要是两个人都写论文，那么投到同一个会议肯定有一个要被 reject。这样对集体发展不利嘛，大家不就是发几篇论文混毕业吗？何苦？

===== paper, paper, 还是paper =====


说到paper我就痛心。我的方向上我至今还没有看到几篇我觉得像样的文章。我主要进行集成电路布线算法的研究。看起来高深，其实是很简单的问题，一个平面上有一些点是电路里的电极，现在需要用铜线把它们连起来，怎么样让连线的长度或者时延最短？这个问题跟几何上一个有名的问题 Steiner tree 问题有关系。我的导师就是以前写了一篇这样的paper发到IEEE transactions。

已经毕业的一个师兄就在他研究的基础上修改来修改去，发了好几篇paper。英文的不够还翻译成中文，投到国内的期刊。后来一个师姐又在这个师兄的基础上进行修改，又发了好多篇。可是在我看来，他们的论文纯粹就是炒冷饭，没有什么创新。一个问题解决了，那么解决问题的人显示了他们的聪明，至于这个问题对人有什么用，他可以暂时不管（虽然我也严重反对这种做法）。后来又有人来搞这个问题，多半是被老师分配来的。他也小修改一下，修改想法其实不费工夫，主要是你怎样把你的 Introduction 写好？可以让别人觉得你的工作有意义？这就是功夫。作家的功夫。我有一次面见INRIA的头目 Jean-Claude Paul 时，他就对我说：“Tsinghua students are all writers, not scientists.”

现在清华研究生做的事情无非就是，写好paper，然后找个地方投出去。SCI 的最好，EI的其次。偏僻的没人看的杂志也没关系，交钱也没关系。我就知道日本的一个SCI索引的期刊收1000美元的版面费。导师出钱，不投白不投，投了好毕业呵！

现在我也被“分配”来做这个问题。虽然说是一个有名的问题，但是这个有名的问题已经被研究了好几十年了。有很多挺厉害的人做出了很重要的贡献，但是我们为什么研究这个问题？我至今没有搞懂。

开头导师只是给了我两篇paper，据说是以前他一个得意门生写的，美国某大学的副教授。其中有一篇说是如何在不构造 Delaunay triangulation的情况下生成 MST （最小生成树）。看到这篇文章开头说在 rectilinear metric下, Delaunay triangulation 就不能用来构造 MST 了，所以他设计了一个新的算法。这个算法比起 Leo Guibas 的算法更加简单。文章里还提到一次 Matroid，让初出茅庐的我觉得高深莫测。我还专门去借了一本《Matroid Theory》来看，其实他的论文剩下的部分跟Matroid没有任何关系。可是我对“Delaunay triangulation 不能用来构造 RMST” 这个说法产生了怀疑。经过理论分析我觉得即使在 rectilinear metric下，Delaunay triangulation 也可以用来构造 MST 的。我觉得作者只是故意这么写，想为他设计算法的动机找一个借口。我决定实践我的想法，写一个程序从Delaunay triangulation 构造出一个 RMST。这本身不是什么创新的工作，可是我却在想，这样一个东西能不能用来构造 Steiner tree 呢？后来我真的就想出一个办法。实验表明我的算法比以前的算法要快几倍。

这是不是说我的算法是一个值得写paper的东西呢？导师说我应该写一篇，但是我认为我只是在挑别人的毛病时意外想出了一个改进的算法，并不会对将来的研究有什么启发。虽然程序快了一些，但是很少有那么大的线网需要这么快的算法，而且几倍的提高在我眼里不算是一个理论上的改进，而且这个算法不能推广到其他距离空间，可扩展性很低。所以我内心觉得这个结果不令我兴奋，不想写论文。但是在老师的一再要求下，我居然把这个研究写成了两篇 paper。按照他的说法：“应该分阶段总结你的成果。” 起初投出去的时候评委总是说这个东西不实用，导师说这是评委的问题，他们觉得不实用我们就投到理论一点的会议。经过几次投稿，还是失败了。我终于忍不住了，对副导师说出我的想法，我说：“看一个作家的水平，是看他扔在垃圾筐里的纸。就让我把这篇paper永远藏在我的垃圾筐里吧。” 但是他不甘心，说你要相信自己的实力，然后把我的算法胡乱夸奖了一番。我说我不管了，随便你怎么办。我就开始研究我自己喜欢的东西去了。之后他居然真的投中一个欧洲的会议，是被 LNCS 收录的，LNCS 是 SCI 索引的，所以我居然有了一篇 SCI 文章！我自己不喜欢的文章也是 SCI 了！

第二篇论文就更传奇了。几投不中，就其原因，评委说是没有和现在“最先进”的算法程序实验比较。而我没有比较的程序，就是那个让我觉得发 paper动机不纯的人的程序。没办法，求他给我代码。比了一下，确实比他快。不过我估计他程序写的有毛病，老是 core dump。而且从实验数据来看，运行时间增长的速度不符合他论文里声称的时间复杂度。但是没办法，他只给 binary，也不给源代码。程序快几倍，很有可能是实现上的问题，而不是算法更好。我的一个师兄以前就把他自己的算法戏称为“基于bug的优化”。我觉得这样比较对那个算法的作者不公平，完全没有发表的价值了。但是没办法，谁叫我们都是出来混的，没有人在乎这些。我还是记录下数据，添到论文上。一投就中，得了一个最佳论文奖。然后就有一篇校内新闻宣传：“我校王垠同学获得XXX会议最佳论文奖。这是大陆学者首次在如此高级别的会议上获得如此高的奖项。” 这个“高级别”的会议，在我看来就是个垃圾。美国人都把最差的论文投到这里，就是为了来旅游一圈而已。

我对自己的做法产生了深深的负罪感，觉得自己正在进入这团混沌，正在被同化。我决定换一个题目研究。我就开始考虑zero skew tree. 找了20多篇paper来看，发现他们没有什么本质的改进。而且对于问题本身的价值，他们完全就不清楚。有的作者后来甚至说，其实以前他们考虑的问题是没有必要解决的，因为实际应用中不可能遇到，我们其实可以把问题变成这样……本来一句话就可以说清楚的事情，又写成了好几篇paper。我就是这样在 paper的海洋中，找不到目标。

我见过的这种低级别的会议，低质量的论文几乎都是从 IEEE 那里出来的。道理很简单，IEEE 会议多，会议论文集都像两大块砖头，还是双列小字排版，当然能容纳下这么多的垃圾了。所以我对 IEEE 也没有好感。

===== 火山小规模爆发 =====


第一篇投中了会议之后，副导师很高兴的说“代替我去开会”，到希腊Santorini岛玩了一圈。回来还跟我说希腊不好玩，好苦啊，幸好你没去。然后就继续要我为算法申请一个专利。

写这个论文我都已经焦头烂额了，一点都不感兴趣。现在还要写专利，“要像教小学生做这件事一样，一步一步的把算法写清楚，举出实例”。我觉得快不行了，再这样折腾下去，我到博士毕业也许也就只搞出这些小儿科东西吧！我终于小规模爆发了一次。我坦荡的告诉了副导师我的想法，我觉得做学问应该是什么样，我觉得这么点东西不值得申请专利。我还告诉他我对国内的研究环境很失望。

他慌了，可能以为我想要退学，赶忙找我谈谈。对我说，我知道你心中有很大抱负。所以这次就不写专利了。我知道你想有更好的研究环境，但是不踏踏实实做好现在的工作，又怎么能有大的创造呢？然后就开始举爱因斯坦，居里夫人的例子…… 然后说，其实你在这里好好努力，将来出国的机会多的是，你想去Harvard也行，你想去Princeton，都行啊！

你说行就行？你去去给我看看？我们实验室从来就没有去这些地方的。继续这样做下去，以后哪个真正的科学家还会要我？

===== 全面发展 =====


在对清华的研究完全失望了之后。我就准备考GRE，TOEFL出国了。我去上了一个新东方的班，没学到什么英语方面的东西，倒是接触了很多新的思想。老罗的言论特别有趣，虽然我不是完全赞同他的意见。写GRE作文特别培养思维能力。我为了写GRE作文，常常为了一个不明白的问题到图书馆翻阅英文的哲学书籍，有关教育的书籍…… 对于很多问题我得到了完全不同的观点。大学的目的是什么？人的价值观是由理性决定的吗？等等等等。我读到了亚里士多德，柏拉图，康德等人的言论。甚至有个哲学家说 "All Animals Are Equal". 我看了他的文章觉得有很多可以批驳的观点。我看到迪卡尔的文章，说“要掌握科学就要掌握它的全部”，这句话真合我心意，我就是想做一个懂很多东西的人啊。我想结合艺术与科学。虽然我这个观点得到一些人的批判，但是我仍然相信迪卡尔。

从这些互相矛盾的观点中，我有了自己的判断力。我开始能够揭开从小蒙在我眼睛上的有色眼镜看问题。我开始检查我自己的思维，我以前的观点。看看它们是否是未经判断就盲目放进去的。我检查到很多很多的错误。我的待人接物，我对他人的理解上，都有不足之处。我还检查到妈妈传递给我的一些有色眼镜，小学课本给我们的有色眼镜。我开始学会用自己新的方式对待他人，看待事物。我不再盲目相信权威，哪怕他是诺贝尔奖得主，图灵奖得主。我有了自己的自由思维。

在那段时间，我感觉我的心智大门被开启了。我开始尝试从来没有做过的事情，以及从来不认为我能做好的事情。我一次又一次的相信我能。我能学会画画，我能打好太极拳，我能理解古典音乐…… 世界还有那么多美好的事情等着我去学习去开发啊！

可是，我们却像囚犯一样被判了5年在清华。博士学位就是我们的枷锁。

===== 醒悟，paper的奥秘 =====


清华研究生谈论的重点是什么？是 paper。吃饭的时候谈，喝茶的时候谈，睡觉的时候也谈。隔壁的同学在进校第一年就为paper惶惶不可终日，说：“你知道吗，他们要求我们发SCI，怎么办呢？我几个师兄都是因为没有paper延期毕业的。” 这恰好就是那个为后10%淘汰惶惶不可终日的同学。他的老师是个院士，可是他在手下就干一些写word文档之类的杂活还忙得要命，根本没有时间思考问题。

后来听说学校有规定，博士生必须发4篇paper才能毕业，其中必须有一篇是SCI索引，或者两篇EI索引。看上去冠冕堂皇的SCI, EI，不就是跟 google 差不多的东西吗？被它索引了怎么样了？特别是对文章的篇数作要求，而对质量没有判断。我其实读了两年都还不知道学校是这样规定毕业标准的。当我知道的时候，已经有人告诉我SCI=Silly Chinese Index。真是让人啼笑皆非。

学校没有能力评价学生的水平，就拿文章数来衡量。这样的毕业标准造就的是怎样的学生，怎样的实验室呢？难道导师真的没有能力判断 paper的好坏吗？有些是，但是有些不是。即使他知道你的论文没什么价值，也会叫你发表。我发现paper数量的背后，是某些人的如意算盘。想一想是怎么回事吧。国家看什么来拨款研究？看paper。看什么来评价一个学校的水平，也是paper。国家没有能力评价你的能力，当然只有看你有多少 paper。所以有了paper就有了钱。只要你能写paper，培不培养你，你将来的发展，关我们什么相干？你写的paper别人能不能看懂，能不能转化成生产力，管我们什么相干？怪不得有的院士想尽办法也要多收学生，宁愿自己帮学生出学费也要他进来。因为学生就是财源。paper可以带来基金，可以在美国买小车洋房，没有基金就让学生干活吧。一个月几百块钱吊着一条命在那里为你拼命，谁叫他们想要那个博士学位呢！

该清醒了，博士无产阶级！

===== 告别清华的博士学位 =====


现在我已经厌烦了国内所谓的“学术”。我准备放弃清华的博士学位，出国找个好老师，进行真正的研究。博士第4年了，做出这样的决定真是不容易。有人告诉我不要放弃，你知道有多少人正在羡慕你？你知道一个清华的博士学位有多么值钱吗？但是我不能这么沉默下去了！

博士学位，累坏了多少年轻的中国人！我不再为它浪费我的青春。我知道国外大部分研究也不是那么好，如果国外也找不到好的老师，我就找一个简单的工作，和我心爱的人一起生活。有人说这是浪费人才？在清华混沌的过日子才是浪费呢！当一个侍者至少也让我感到对社会有贡献，看着顾客满意，我会露出笑容。可是做一个博士却没有。我感觉自己是个没用的人。

我已经完全看透了中国教育的失败。我高中的时候就受到它的伤害，这种伤害延续到现在。中国教育已经成为埋没人才的祸首。留在这个圈子里就是屈服，我不出声，大家都不出声，这个世界就会继续这样郁闷的运转下去。我今天要对这个系统大声地说一声“不！”

我离开了。可是中国永远也不缺少为清华拼命的人！因为他们的妈妈会告诉他们，清华是全中国最好的学校。你要考上清华，为我们光宗耀祖……

===== 行动 =====


2005年9月22日下午3点，我在东主楼导师的办公室里跟导师和副导师再次重申了我的想法。包括以上的一切，和我准备退学，准备10月份考托福的打算。导师经过一番举例爱因斯坦，居里夫人，叫我踏踏实实的说教无效之后，严厉的批评了我只顾自己，不顾及教研组为我付出的心血。然后说：“要是你不能再为实验室作研究，我们就不能支持你了，前两个月实验室发的钱我收回。你可以马上写退学申请，我们实验室没有什么损失，我们有的是人干你的事情。不过我要告诉你，你一旦退学，连学校的住宿都要被收回！”

接着是副导师尖声的咆哮：“是啊，你瞧不起我们。我们是没有你聪明，可是我们勤勤恳恳……你知道你得的那个best paper award，我们付出了多少努力吗？你认为这么容易拿到吗？那是多少国外专家鉴定……”

我安静的等他说完。真像是一场闹剧，一场梦。他平息下来之后，我说了一声“再见”，然后默默地走出了办公室。

你们要退学申请？这里就是我的退学申请。

===== 尾声 =====


晚上收到副导师的email说：“还有一件事需要向你说一下：你在学校学习期间所取得的成绩包含你的努力、导师的指导帮助、同学们的帮助，还有学校和国家的支持。你作为博士生学习阶段取得的成果属于教研组、学校和国家。正如同我们作为职务发明的专利属于学校一样。

你在MST、SMT等方面取得了结果，它属于教研组、学校和国家。单位有责任进行合理的应用，为国家建设、国家荣誉服务。有责任进行进一步的整理丰富、向高水平的刊物投送。这里我们想说明一下上述的情况，同时，也告诉你一下：你若愿意将这些成果进行进一步的整理、我们已经给你提出了具体的修改意见，欢迎你按照进行修改。你若放弃，我们将进行具体的改进、投递。我们将尊重你的意见。谢谢。”

最后还是没有忘了paper的剩余价值。进一步验证了我的判断，他们在乎我吗？不。他们只在乎paper。至于我流离失所，又有何相干？我不知道有多少无知的弟弟妹妹又会把他们的研究建立在我不屑一顾的paper之上。

Segmentation fault ! Core dumped —我写本文的目的

Repair what you can — but when you must fail, fail noisily and as soon as possible. —Basics of The UNIX Philosophy

修复你能修好的—但是如果你必须失败，那就尽快喧闹的退出。—UNIX基本哲学

我不是一个中国教育操作系统下优良的程序。我在系统里运行了将近20年，快到最后的时候才喧闹的退出，Dump出这么大一个core file。我知道有的程序很早就退出了，我自愧不如他们。但是有的程序一声不响就退出了，还有很多的程序成为了zombie，永远的驻留在系统中成了系统的负担，在这一点上我又比他们好一些。至少我让程序员有机会用调试器检查core文件，调查这个程序运行中哪里出了问题。

“你退学就退学，干吗大惊小怪，牢骚满腹的？” 如果只是有牢骚，我就把隔壁同学拉过来一起发发牢骚就完事了。可是我虽然不是优秀的程序，我觉得应该为修复这个系统，修复自己做点什么。我希望国家的教育和研究环境好起来，这样大家就安心的生活，不用出国搞得奔波流离。有多少恋人由于一个人出国了而痛苦的分手，有多少父母在盼望海外游子的归来？我不能像很多人那样申请了国外的学校，拍拍屁股就走人。我一年前就考GRE想出国，可是我总是自欺欺人的幻想国内的境况会好起来，有时我觉得看到希望，可是马上希望又破灭了。一个个大师来了，让我一次次燃起希望，可是发现他们对环境的作用也不大。一些大师不满意，又走了。我自己也想尽力改造环境，结果经过多次努力无效，自认能力不够，终于放弃了。

在发现大家都忙着发表paper而没有讨论时，我曾经建议设立一个清华的THU-Technical Report。我的想法是：最差的草稿扔在垃圾堆里；可能有用但是还不值得向所有人公开的东西发到THU-TR，供系内查阅；如果发现THU-TR的东西会有用，再好好修改了转投会议或者期刊。系学术助理王磊很高兴的采纳了我的建议，并且自愿维护一个THU-TR的编号。可是根本没有人愿意把自己好不容易写出来的但是确实又不值得发表的东西投到这里，因为世界上总有地方可以把这个东西投出去，还是SCI和EI，而这个THU-TR连正式刊物都不算。后来有人告诉我，如果学生都把东西投到我们这里，不知道有多少导师会跟我们急。所以THU-TR的计划就这么告罢。

我一年前写信给Knuth，这个我相信是真正的大师。我说我想退学，想请他推荐一些真正的研究者给我做老师。他回信说“你先找精通中国文化的长者谈谈”。我意识到他可能觉得这是一个文化的问题。我于是想知道中国的科技为什么搞不好，就开始看一些有关文化的东西。后来居然跑到中国社会科学院去听新竹清华大学人文学院的院长讲座，后来又在清华参加了人文学院的研讨会。会上一个老师说的好，当一个制度没法衡量学术水平本身，它就会用一个似乎等价的标准，比如paper数或者高考分数。但是一旦这个标准被确立，人们就会向着这个标准努力，而不是向学术水平本身。他们总会发现制度的很多问题，找出破绽，去达到这个标准，而不是提高自己的学术水平。最后，这个标准已经完全不能反映水平本身。我就在想，这个问题大了，这不仅是环境，制度，而且还是长久以来的文化造成的。从新竹清华大学院长的讲座里，我发现英国人是怎样用科学技术打开了中国的大门，而乾隆皇帝是如何对科学不感兴趣。中国似乎从古到今就不重视科学技术的，中国有自己的优势，自己的文化。对啊，科学技术是个双刃剑，如果照美国那样发展下去也不知道会怎么样。我们中国的文化是瑰宝，但是它已经被外国的坚船大炮打得遍体鳞伤。这不是我们的错，但是我们要努力恢复自己的文化，不能总是怨天尤人。我就开始看道德经之类的东西，还去西麓学社参加古代文化讨论活动，后来又开始打太极拳。

我觉得再没有从实际出发的目标，我的研究就会完全变成纸张了，就像我高中感觉到的一样。所以后来我就自己设立了一个研究方向，我把自己称为“研究博士生”，我要去了解博士生都是怎么样生活的。我就想知道有多少学生有跟我类似的困境。我跟很多朋友谈过，去了解他们的苦衷，研究生也有，本科的也有。我觉得我还应该了解更多的人，就试图到研究生通讯社做记者，心想挂一个记者证，就好跟人套磁问一些问题了。结果他们说我口才不好，所以做了一个秘书。后来记者们告诉我，他们是由上级分配任务的，根本不可能让你去报道学生真正的想法。我为了多多接触外国文化，比较中西文化的不同，又加入了学生对外交流协会(ASIC)，我在ASIC有了很多好朋友。博士生论坛的时候也有很多同学跟我反映研究上的问题。讨论成立特别兴趣小组（SIGs）的时候，我就提议成立一个Common Room，一个同学说她去 Stanford 的时候那里就有很好的 Common Room，很多人在一起讨论，这是国外大学斯通见惯的东西。我告诉Oxford的朋友我的想法，他很惊奇地说：“你们居然没有 Common Room？” 后来吃饭时我又找一些老师谈话，发现他们也对这个事情无可奈何。老师自己的办公室都要自己出钱，谁还能支持你们有这么大一个房间？而且即使有了房间，谁来讨论？还不就是拿着别人的paper，试图找点可以改进的地方，或者就讨论哪个会议好发paper。Common Room只是一个形式，只要有人感兴趣，随便找个茶馆也能讨论。问题就在于没有人有精力有心情进行真正的讨论，制度决定一切。我们无能为力。我觉得自己一个学生力量太小，曾经试图找大师帮忙。我找到Andy Yao，述说我的苦衷。结果他对我说：“别试图去改造环境！你没有这个能力，连我都没有！改造好你自己就不错了。" 改造好我自己，可是怎么改？所以我决定先换一个环境，到一个真正搞研究的地方去体会，去学习。

其实我不后悔进入川大，不后悔来到清华，珍惜一切的历史，因为没有它们，我也许就不是现在的我，有着自己想法的我。我也许就在安逸的生活中变得堕落。它们不完美甚至给我痛苦，但是我还是珍惜，珍惜这里的朋友，这里的一草一木。也许这就叫做爱。我会变得更好，我会挂念我的满目苍夷的祖国母亲。我会回来告诉你我学到的一切，我会给你和其他儿女真正的幸福，一定的！


====== Cornell 感受 ======


作者：王垠

===== Cornell 感受(1) =====

早就有人问起我的学习情况，问我有没有找到理想的研究环境。我却总是弄一些小动物，要不就是好玩的内容在这上面。真是惭愧，因为一直觉得自己还没有什么发言权，一直觉得是不是自己搞错了。不过来了 Cornell 已经一年半，也可以说一下对美国教育的感想了。我的感觉可能是错的，或者局限于我的专业或者学院。不过总的感觉就是，美国教育其实很大部分是商业性的应试教育，而外国研究生基本上是用来骗本科生钱的廉价劳动力。本科生能学到的真东西，相对于他们交的学费，也是少而又少的。巨大的作业和应试压力，已经剥夺了学生思考的自由，真正潜心研究的环境是很难求的。

还是让我慢慢的回忆一下这一年半的经历吧……

2006 年的8月3号，我们经过20多小时的飞行，来到了 Ithaca。面对这个小山村，我们是非常新奇的。这里的夏天是如此的美，到处是绿草，到处是瀑布，自来水都是可以直接喝的，房间里全都有地毯。貌似一切都是那么的美好，人都是那么的有礼貌。刚走到人行道边上，路上的汽车就缓缓停下来，让行人过马路。路上遇到一个不认识的人，他会莫名其妙跟你打招呼，说： “Isn't it beautiful?” 总之 Ithaca 的美是不用多说了的，居民的总体素质还是比较高的。不过很快，这种新鲜感就随着在 Cornell 遇到的各种事情消失了。Cornell 给我的第一印象就是非常差的。

其实正式开学是在20多号，我们之所以这么早的来，原因是需要参加一个所谓 ITADP Summer Program。ITADP 也就是 International Teaching Assistant Development Program，也就是对 TA 的培训。这个培训是强制性的，不参加就不能做 TA，也就得不到经济支持了。我们连时差都还没倒过来就参加这么一个课程，每天从上午9点到下午3点。我也不记得申请 Cornell 的时候他们提到过这个东西，而是在接受了 offer 之后才收到一封信，说要所有外国TA参加这个培训。没想到 Cornell 的印象就从此在我心中一落千丈。

首先，经过培训的，或者仍然在接受培训课程煎熬的中国同学，我们都痛恨这个东西。我们得出的一致结论就是，这个培训对提高英语水平的效果是微乎其微的，纯粹就是浪费时间和精力。夏天的培训只有一个星期，分小班进行，在培训的末尾老师会进行评定。如果不通过，就需要强制性的修一期的课，叫做 EDUC 578。EDUC 578 期末会有一个评定，如果不通过，就需要修 EDUC 579。接着是 EDUC 580, ... 课号换了，但是课程的内容基本没有换，不断反复，无聊之极。总之，这个课耗费大量精力，影响学业。中国学生大多都对这个课程叫苦不迭。很多人都把牢底坐穿了，上了两年还没有通过。如果真能留下来，那还算不错的，各个系情况不一样。我认识有一个电子系的博士生在第一期评定没有通过就被取消了经济支持，他只好自己掏钱转成了计算机系的硕士。

再来看看这个课程的性质呢？我还深刻的记得在 Summer Program 的时候，ITADP 的主要负责人给我们讲的话：“You know why you are here? ... You know how important the undergraduate students are to us? You might even find a prince or princess in your class one day, from another country! ” 那个语气呀，就跟大老板差不多。我们是Ivy！是贵族学校！这不是很清楚的暴露了我们的用途吗，是为本科的“公主”和“王子”们服务的。后来我听说，的确是这样的，这个 ITADP 就是在本科生家长的强烈要求下成立的。而王子和公主们，可能还是没有得到他们想要的。

这个课是不可以旷的，旷课两节就会 fail 掉，从而取消 TA 的资格。这个课也是不可以迟到的，否则老师在下课的时候会警告你，要是再迟到就会给你 fail。这个课的规则是如此的严格，真是非常特殊。没有任何专业和非专业的课程有如此的军事化管理。再来看这个课程是什么内容。其实主要的内容就是告诉大家什么是好的 teaching，什么是坏的，大多都是废话。我记得在讨论教育的时候我提到，一个好的老师应该引导学生去思考，告诉他们知识是怎么获得的，而不是把知识灌输给学生；应该减轻学生的压力，鼓励他们创新。结果老师对我的这些说法很木然。很显然我的说法，她丝毫没有预料到过。她所期望的只是写黑板时字不要写得太小之类的。

然后我们做很多所谓的 microteaching 练习。microteaching 就是在课堂上对其他参加课程的同学讲授一些自己专业上最基本的常识。拿我来说吧，我第一次讲的内容就是二叉树。这个练习有一定的好处，就是让我明白了其实很多时候老师认为学生明白了，其实老师只知道自己明白了，而不知道学生其实是不明白的。但是我后来发现，对于 Cornell 的本科生，基本是没法知道他们是否明白。不论是我讲课，或者我和本科生一起听课，很普通的情况是这样：老师经过一段精彩的讲述之后，问：“你们明白了吗？”没有人吭声。再问：“有人没有明白的请举手。”也没有人举手，一片寂静。老师无可奈何，只好继续讲下去。总之，大家都以为别人都听懂了，都很害怕别人笑话自己不懂，感觉非常像国内的高中。不过总的说来，microteaching是很费精力的。讲一两次还行，反复的做就很烦了。课程的另一个内容是对自己的话进行录音，每次10分钟以上，一个星期三次，必须及时提交给老师评语。这个对于英语有一些帮助，不过费时间太多了，为了那10分钟，经常需要准备一两个小时。而且经常找不到有趣的话题，所以觉得很无聊。

因为第一期的时候，系里有一个教授碰巧给我一个 RA ，所以我没有参加 EDUC 578 （当然，像所有中国学生一样，我夏天的评定是没有通过的），所以第二期的时候我才被迫参加了这个课程。每个星期这个课程都耗费我太多的精力，以至于我在第二期的时候选的唯一的一门理论课后来没有精力完成。一方面这也是由于教课老师的问题，他只会在黑板上写定理……证明…… 所以后来我drop掉了那门传说中的牛人讲的课程，导致第二期就只修了 ITADP 的课程。一个系里都不认为是课程的课程，就这样占用了我一学期。

幸亏我表现还好，每次都貌似很积极的样子，很配合老师，其实心里在骂这个 program。同时我也比较同情老师，因为她也是打工的，讲了这么久这个课也觉得有点无聊了，虽然她没有直说 ;-) 所以很幸运的在期末勉强通过了评定，以后就再也不用上那个可怕的课了。不过还有不知道多少中国学生仍然在经受 ITADP 的煎熬……

===== Cornell 感受 (2) =====

再谈一下本科教育吧，因为我感觉“王子”和“公主”其实挺苦的，跟在中国上高中差不多。因为Cornell本科生太多，有两万多人，而每个人都可以选修任何一门基础课，所以经常人满为患。我第一学期做 CS 100m 的 TA。100m是一门最基础的编程课，前一半讲授 Matlab，后一半讲授 Java。天知道 Matlab 怎么被当成“编程语言”来教了，以至于在后一半的时候学生还经常继续被 Matlab 误导，用那种思维方法来写 Java。不过现在100m已经去掉了Java的内容，变成了纯 Matlab 的课程。要学 Java 就去上 100j.

那一期总共登记的学生有280多个，课堂我第一堂课去过一次，教授让我们去跟学生们见个面。结果只去了两个TA，一个大礼堂坐满的人，教授差点都不知道我在那里。学生们都很懵懂，所以老师讲什么基本上没有什么关系。因为基本没有什么互动，所以感觉还不如用个摄像机拍下来，这样学生一遍看不懂还可以倒回去再看。不过我知道他们不会那么做的，要不然大家都不来上课了。

我们总共有9个TA和十来个本科 consultant，负责批改作业，试卷和答疑。编程作业是两星期一次，期中考有两次，期末考一次。每次作业提交之后，大家都会马不停蹄开始组织批改。那三次考试就更加军事化了，每次都是当堂闭卷考试，一个大礼堂楼上楼下全都坐满。考考考啊…… 监考完之后，大伙就按姓名字母把试卷分批收上来，然后“押送”到一个房间开始流水作业。在黑板上画一个流程表，改完一个字母就在上面画一个X。一般会从晚上9点半一直弄到半夜一两点钟，才能完成任务。

我改作业都很慈悲，不忍心为了一点小错就扣分。如果思路是对的，我就不会扣很多分。但是不是所有 TA 都这么好，有些特别刁钻，会想方设法把分扣下来，以显示自己比别人懂得多。如果要求重判分数，还需要提交书面申请。很多高年级课程居然还会课堂点名，有些每星期都有一次作业，需要在课堂当堂交作业，如果迟交就会被拒绝接受，没有商量。有些交作业需要把每道题分开放在不同的信封里，这样他们方便分给TA，每个人只改一道题。一切都机械化了。所以本科生基本上生活在作业，考试与分数的恐惧之中。这样的环境下，所谓的西方 critical thinking，只不过是一个笑话。这种待遇是我在川大都没有遇到过的，现在比较一下，川大才算是真正的大学呀 ;-)

每学期中和学期末都有学生对 TA 的评定。会对各方面进行打分。不过从来没见过这个分数起了什么作用就是。另外据说 Cornell 对本科生有各种奇怪的隐性收费的做法以增加收入，因为学校有很大的财政赤字。

====== 对博士学位说永别 ======


作者：王垠

经过深思熟虑之后，我决定再次“抛弃”我的博士学位。这是我第三次决定离开博士学位，也应该是最后一次了。这应该不是什么惊人的消息，因为我虽然读博士 10 年了，可是我的目标从来就不是博士学位。我在寻找更重要的东西，而且那个东西已经被我找到了。所以我的“博士生涯”其实完成了它的使命，基本上可以圆满结束了。

　　如果你从我之前的博文判定我现在生活在我所向往的环境中，那么你就误会了。我学到了我想要的东西，但是却发现学术界不再是我向往的地方。相反，它阻碍了我的前进。很显然，博士学位这个东西其实已经被学校和学术界作为利用廉价劳动力的“无形枷锁”。你想要“博士”的头衔，那么就廉价给我们干活吧，能出论文的就出论文，能写代码的就写代码。我根本不需要“博士”这个头衔来显示自己的价值，所以我抛弃学位，离开学校，离开学术界，是一点都不心痛的。　　

===== 思想的监狱 =====


　　如果你以为学术界意味着思想的解放，对真知的无私分享，那么你就错了。涉猎不深的人往往有一种美好的幻觉，觉得老师都是在无私的传授知识。可是等你深入到一定程度，就会发现其实没有人对于知识是无私的。这对世界顶尖的科学家们也不例外，他们“分享”给你的东西，往往是一堆琢磨不透的符号和公式，他们提出一堆可怕的术语来吓唬你。他们告诉你的只是思维的“结果”，而不是思维的“方法”(也就是所谓“直觉”)。等你通过自己的独立思考得到同样的东西，却发现这些大师们其实一直把直觉隐藏在很深的地方，故意的让你知其然而不知其所以然。他们甚至会诋毁直觉本身的价值，试图让你相信他们想出那些公式没有通过使用直觉，试图让你相信只有那些吓人的公式，定理和证明才是可靠的，而直觉是不可靠的。可是真正的直觉却是非常强大的，只要得到了它，你就可以完全的理解那些公式，而且会知道它们是怎么来的，甚至发现里面存在的问题，想出新的公式。

　　然后你就会恍然的发现，你曾经认为的“思想的天堂”，其实是“思想的监狱”。你会发现你心目中的很多大师们其实不是真正的科学家，而是政治高手。你会发现身边有很多人其实是故意在你面前提起一些术语，以此来显示自己的“高深”。当你直言不讳的道出这些东西背后的秘密，他们就不说话了，然后就对你怀恨在心，希望你早点消失。当你给那些提出这些术语的大牛们发 email，试图核实自己发现的这些术语背后的直觉，他们会很快的停止回复你的邮件。当你试图从教授们口中得到这种直觉，他们会不耐烦的对你说：“你问这种问题有什么意义吗？这东西就是这样的！”这说明了什么呢？这说明他们害怕了。他们害怕自己的地位受到威胁，他们害怕这种直觉一旦被大多数人掌握，他们就不再是高高在上的“学术权威”了。人们就会说：“那个东西其实不过是……”

　　这就是我这些年来所亲身经历的。我的同事们其实都不知道，他们所景仰的大师们提出的高深的理论，好些已经在我心目中被默默的“杀死”了。对我来说，它们不过是用一堆吓人的数学公式，翻来覆去的表达一些用几句话就可以说清楚的东西，而且它们好多其实已经被另外的东西所超越。所以大师们常做的一件事就是招收“门徒”，只要有人愿意做他们的接班人，把自己的工作“基于”他们的理论，他们提出的空洞的概念就可以一直存活下去，而他们就可以保持自己的地位。所以你就发现一些可笑的现象，本来一个新概念跟某个老概念没有关系，却被生拉硬拽在一起。本来一个概念可以被独立的理解，却被牵扯到一堆的老概念中，被搞得无比复杂。

　　这就是为什么我曾经提到，我经常用两个星期的时间就“灭掉”了某些领域长达 20 年的研究。这并不说明我是天才，这只是说明很多人在玩弄学术的把戏，而我看透了他们的把戏。看透了这些把戏并不能带来实际的效益，却可以让我自己节省下时间来解决真正重要的问题。但是我看不到学术界在这方面有任何改进的希望。所以，为了思想的自由，我不能生活在学术界。

===== 论文的游戏 =====


　　我曾经以为我的专业（程序语言）是计算机科学里面论文水分最少的地方，但是其实并不是这样的，天下乌鸦一般黑。程序语言专业的论文与其它专业唯一的区别是，这个领域的人玩的把戏更加巧妙。这些论文动不动就触及 Church，图灵这样的人物提出的概念，所以就算里面没有任何新的内容，你早就被吓倒了，就别提看出里面的把戏。可是由于我看穿了一些核心概念的本质，所以经常浏览一些论文都发现其实没有任何新东西。这些论文有些甚至来自某些本领域众所皆知的“巨星”。由于他们地位显赫，这里我就不点名冒犯了。

　　很常见的一个套路就是，把一些很简单的“程序”用一堆“数学符号”改头换面写出来，把它们叫做“逻辑”或者“类型系统”。人们都崇拜数理逻辑，因为他们看不懂那一堆的符号和推理规则。可是经过自己的努力，我却看透了很多逻辑学家的把戏。我也可以玩这种把戏，我知道如何设计出新的逻辑。可是我也知道其实我们并不需要这些逻辑，所以我从来不为此发表论文。可是这样的关于“程序逻辑”的论文，仍然频繁的出现在最高档次的学术会议。一眼就知道他们在干什么，让我觉得非常无聊。

　　上个学期，我跟导师做了一个学期的研究，内容是关于“类型系统”。说是“跟导师”，但是其实他只起到绊脚石的作用。他不但没有真正的参与讨论，而且明显的对于我深入的发现有抵触情绪，并且不断的打击我。我用于“说服”他所使用的精力，比我用来研究的精力还要大好几倍。到头来我却发现，原来他根本没有听我在说什么！我总是发现一些复杂的类型系统的功能，要么就是完全不可能实用，要么就是可以用已有的更简单的方法实现。所以这些发现，虽然从实际意义上“杀死”了好几个长达几十年的领域，把它们归并为同一个非常简单的东西。也就是说，这些发现消灭了一些不必要存在的东西，而没有带来任何“新东西”。所以他总是对我说：“你的这些想法有什么用吗？”然后我才发现，原来他所要的，并不是深入的理解，而是别的东西。这个“别的东西”，当然就是论文和经费。很显然，导师们只是把学生作为可能给他带来论文和经费的人。他们更喜欢那种看不透事物本质的，对什么“新概念”都持手舞足蹈态度的学生。因为这些学生可以很快的写出一些看似高深却没有真东西的论文，然后从 NSF 等研究机构要到钱。

　　所以说，深入本质的认识，其实在学术界是不受尊重的。因为深入的认识往往是无比简单的。如此简单的东西，又怎么拉得到经费呢？

===== 政治的泛滥 =====


　　我可以不谦虚的说，我是这里最好的学生。我身边的同学，没有一个可以超越我所能做到的事情。而他们能做的事情，却没有一件是我不能做的。在 Dan Friedman 的两门高难度的课程都得到 A+， 在 R. Kent Dybvig 的 Scheme 编译器课程得到A+，并且在某种程度上超越了他们。在两个星期之内，完全凭自己的思考写出正确的 CPS 变换（10多年的研究成果），以及 ANF 变换（我导师的最重要成果）。多次在两个星期之内，“灭掉”某些领域 20 多年的研究。对很多东西有自己独到深入的见解。在工程上有Google 的那个项目，以及我自己的一些项目，……

　　可是这所有的一切，都没有让我受到同行们的尊敬。相反，由于我喜欢说真话，他们恨我又怕我。他们都怕把自己的东西给我看，因为我总是能很快的道出它们的本质。那些精于玩弄政治的人，显然更加得到人们的赏识。我本来不想把这些“业绩”摆出来的，实际上这些事情我一直以来都没有在同学面前提起过。可是显然，在 Friedman 和 Dybvig 的课程上挣扎不堪的同学，在某些会议发过一点鸡毛蒜皮文章的同学，现在很是趾高气昂，他们当然希望别人都不知道我的优秀。

　　可是我没有告诉他们的实在是太多了。他们的论文里面的内容，其实好些是我几年前就得到了的结果，只不过我懒得为这些鸡毛蒜皮的东西写论文。记得有一次，几个 Friedman 课上的同学想做一个暑期项目，试图改进 miniKanren (Dan Friedman 设计的逻辑语言)的效率。那个时候我已经重新实现了 miniKanren，并且独立的加入了一些扩展的功能，比如 constraint logicprogramming。我一听到他们这个计划，立即就告诉他们，miniKanren 所使用的 substitution 的数据结构是 associationlist，查找时间是线性的，显然效率很低。使用另外一种“函数式数据结构”，比如函数式的平衡树就会好很多。可是当他们听到这些的时候，居然保持了一种可怕的沉默，完全把我的话忽略了，就像我并不存在于他们面前！一年多之后，他们发表了一篇论文，里面的基本内容就是我告诉他们的那些话。当然，署名里面没有我。我根本不在乎这么小的想法，我本来就觉得他们根本不应该为此写论文。可是一点谢意也没有表达，倒觉得是他们自己了不起，真是让人难以接受。

　　另外还有好几次类似的情况，我都不想说了。后来我才从一个同学口中得到一些真正的信息。他说，某些人喜欢在听到别人好的想法的时候，进行故意的打击，或者莫不关心的样子。等别人对他们自己的想法失去兴趣之后，他们却把他的想法拿出来署上自己的名字发表。这种事情就曾经发生在他的身上。他的导师一直打击他，以至于他写出来的论文两年都没有发表。等他决定离开之后，却发现自己的想法被导师和另外一个人发表了。没有署上他的名字。

　　这是对知识的公然的盗窃甚至抢劫！这也是我越来越不喜欢跟人讨论的原因，因为很多人得到那些想法，就会想玩弄一些花招把它们据为己有，以此出名，却连个谢字都不说一声。我看到这种现象不只存在于我的身边，而且存在于整个学术界。有这样的政治和勾心斗角，我留在这里还有什么意义呢？我在这里，以至于整个学术界，其实已经没有什么值得合作的人了。

===== 何去何从 =====


　　当然接下来我需要思考的是，我应该做什么。显然，我所学到的知识可以轻而易举的给我带来高薪的工作。可是我也知道，我知道的这些东西，其实归根结底就是那么几个小把戏。所以我更愿意探索更加广阔的世界，学会新的东西，找到真正值得合作的人，创造真正的价值。另外，我也会逐渐把我知道的这些“把戏”以直观而容易理解的方式公诸于众。

====== 学术腐败是历史的必然 ======


今天想分析一下世界范围内的学术腐败。

我曾经和所有对学术界抱有幻想的人一样，希望有机会发挥自己的才华，过上有智慧的生活。直到最后一个希望破灭之后，我开始分析其中的原因。其结果是非常有趣的，因为我得出的结论是：学术腐败是历史的必然，是人类历史的发展趋势和技术进步的结果。

为什么这么说呢？

    * 首先想想在资本主义社会里人靠什么过活？钱
    * 一般人怎么得到钱？工作
    * 谁是人最大的工作竞争对手？机器，电脑，互联网，机器人……
    * 自己的工作被机器取代了怎么办？寻找机器干不了的工作！
    * 什么是机器仍然干不了，而且不久的将来也干不了的工作？搞研究！
    * 搞研究是为了什么？制造更高效更智能的机器！

然后你就明白了，这是一个让人类越来越痛苦的怪圈。越来越多的人涌向大学，涌向研究生院，涌向教职岗位，也就是这个原因。他们试图依靠更高的文凭来提高自己在工作上的竞争力，让自己摆脱由于技术进步带来的失业和无家可归的命运。本来貌似情有可原，然而久而久之，之前的这些“可怜人”爬上高位，致使更多的人卷入其中，就导致了世界性的学术腐败现象。记得吸血鬼的故事吗？每一个吸血鬼最开头都是受害者。我们同情那个受害者，然而他一旦变成了吸血鬼之后，就不再值得同情，因为他原来的灵魂已经不在了。

并不是每个人都有足够的好奇心，良好的态度和卓越的聪明才智来完成高精尖的研究的。有些人本来就只适合（或者只愿意）做一些简单劳动的，这些人本来应该受到尊重，他们应该过上安稳的生活。而我们的社会用机器代替了他们的工作岗位，却又不给他们耐以生存的资源，所以他们迫于生活压力，只好硬着头皮去“充电”。他们进了大学，甚至进了研究生院攻读 PhD。他们其实对研究根本不感兴趣，他们在那里完全是为了混口饭吃。知之者不如好之者，好之者不如乐之者。硬碰硬的智力较量他们是敌不过真正爱好研究的人的，所以他们就开始耍一些把戏。

有“志”者事竟成。制度有漏洞，人性有弱点。那么多的人需要高学位，这道防线岂有不破之理？所以呢，你就看到各种勾兑论文，新瓶装老酒，反正以把你搞糊涂混毕业为目标。这就是为什么有些研究课题几句话就可以说清楚，有些人却花了几十年来写各种论文。你要说他们抄袭那又不是抄袭，又没有违法，貌似一切都正大光明，可就是一点用都没有。

最开头教职岗位还比较好找，所以这批人就跟真正优秀的研究者一起，升到了终身教授的职位。可是他们的本性是不会改的，他们对研究不感兴趣，只是想混口饭吃，所以他们就给同类的，以混饭吃为目的的人大开绿灯。为了提高自己的学术地位，尽管知道是扯淡还是让很多人写点论文混毕业。而这些人也极力的吹捧他们，本来没啥意义的研究课题也要说成是有重大意义的。因为真正优秀的研究者的良心，学术界就展开了许多的政治斗争。然而真正的学者搞政治怎么可能是混混的对手，所以不是败下阵来就是看到别人败得很惨就明哲保身了。

早期的时候这一招是比较有效的，很多人找到了教职岗位。可是终身教授的铁饭碗岂是那么容易得到的？它们的数目显然是有限的，而“终身教授”意味着这些人直到寿终正寝都不可能被 fire 掉。通过简单的“非抢占线程调度算法”，你会发现这种职位很快就会饱和，产生瓶颈。如果教授职位饱和了，而你博士毕业要找工作怎么办？等吧，等到有人死了你就有机会了。这就是为什么那么多人拼了六七年的 PhD 之后还要去做 postdoc。有些人在好几个学校做好几年 postdoc 才有机会成为助理教授（Assistant Professor）。

不要高兴得太早。助理教授又是一遭漫长的旅途，一般为期七年左右。这个过程不但是用来考验你是否能胜任终身教授职位的“炼钢炉”，而且是学术界这台机器的上的一个“等待队列”。两三年的 postdoc，加上七年的助理教授，总该有终身教授归西，腾出位置来了吧？可惜的是由于一些肤浅的评价标准，而且里面的渣滓大大的多于优秀的钢材，这个炼钢炉淘掉的经常不是渣滓，而是优秀的钢材。上面讲到的那些混饭吃的人当然是继续耍各种把戏，钻制度的空子，拍正教授的马屁，压榨研究生，甚至压榨跟自己做毕业设计的本科生和硕士生。其唯一的目的是攒够足够的论文，拉拢足够的地位较高者，以支持自己成为终身教授。

当然，随着终身教授职位越来越饱和，这种现象就愈演愈烈。以至于你几乎每次试图跟助理教授合作搞研究都感觉到两个字：贱！Push！有时候你想人家也没有办法啊，都是出来混的。人家可不会承认这一点。总是要举着贞节牌坊，打着一些“高尚”的目标作为幌子。只有跟他们合作的学生才知道里面的底细，但为了自己的饭碗，学生们当然不会告诉你这里面的潜规则。

助理教授以及很多正教授都爱玩一招类似计算机里的“广度优先搜索算法”的研究策略，只不过他们用来执行这些搜索的不是机器，而是人。所以我们暂且把这叫做“人肉广度优先搜索算法”。它的工作原理是这样：现在有 A, B, C 三个课题，都是比较扯淡的，但即便如此其中也最多只有一个发得了论文，但我不知道是哪一个。我就找三个 PhD 来分别进行这三个课题。其中两个人是很可能失败的，但我不告诉他们。我把那三个课题都说成是非常有前途的，伟大的课题，鼓舞着学生们努力向前冲。到时候只要有一个人做出好东西，当然我的名字就在那 paper 上面，而且还是作为 PI（Principal Investigator）。另外那两个失败的家伙，就只能怪他们自己不努力，或者悟性不强喽。我尽量避免让他们互通信息或者合作，因为如果他们做同样的题目，就会失去“广度”和发 paper 的总体概率。我只关心总体的 paper 数，因为不管谁发了 paper 都算我一份，没有人会关心我手里 PhD 的毕业率。而且到时候几个人写差不多的题目，争锋斗角，更加麻烦。这就是为什么大部分助理教授对于 PhD 学生都是“求贤若渴”的样子，随时不忘为自己的“宏伟课题”打广告。遇到这种助理教授你需要特别小心，因为你很可能会被作为他的人肉搜索算法的其中一个“处理器”，最后发现自己搜索的是死路一条。

虽然如此，助理教授仍然是非常辛苦的工作，它往往意味着低廉的工资，昼夜的工作，没有周末可言，工作和生活不分。不但要争取研究经费，还要做研究，指导（操纵）自己的研究生，要教课，还要发论文。学生是最难控制的一种东西，当着他们的面要说空话谎话，他们质疑的时候还要努力“疏导”…… 容易吗我！还有些人结了婚，生了小孩，那就更麻烦了。学校根本不以你的教学质量作为评价标准，所以助理教授上课一般都比较水，管你学得怎么样呢，反正我完成了任务。可是助理教授在七年之后能够拿到正教授的机会有多少呢？呵呵。恐怕比七年之痒之后没有离婚的机会还少吧。

需要指出的是，学术腐败在计算机科学等专业貌似更加厉害一些。一方面是由于计算机比较热门，机会相对较多，还有工业界作为退路。另一方面是因为物理等“硬科学”经过几百年的发展已经非常成熟，可以造成对地球人有意义的理论突破的机会已经很少了。科学都需要经过实验检验，而且论文把关比较严，所以物理等专业的 PhD 非常不容易混毕业，毕业了也不容易找到工作。计算机科学虽然名字里面有“科学”二字，其实根本不是科学，倒有点像艺术或者数学。不是科学没关系，艺术和数学还是很重要的，但它们的从业者比较容易扯淡也没人看得出来，只要随便给自己的理论起个像“后现代艺术”之类的名字就可以了。现在的计算机科学博士论文里的创新程度，基本相当于有些本科生的“毕业设计”，只不过写的让人更头痛一些。这就是为什么大量的不合格研究者混进了计算机等专业。如果你要混饭吃，我建议你去计算机系。如果你想追求自己的兴趣，那就随你的便了。

这就是我对于整个世界学术界的发展趋势的分析了。简言之就是，技术和生产力的高度发展，导致了与资本主义资源分配机制的冲突，以至于大量不适合搞学术的人由于生活没有保障，进行滥竽充数，最终导致学术腐败现象在全世界蔓延。资本主义就像是一个内存分配和处理器调度没做好的操作系统，有些进程占用太多内存和 CPU，却没能有效利用，导致其他进程“饿死”。除非社会的资源分配机制得到改善，否则学术腐败不可能好转，只会恶化。

不要以为所谓的“世界一流大学”里的情况就会好一些，因为没有人可以逃脱社会发展的规律。世界一流大学我见识得多了，本质都一样。而且由于很多人想进去，头破血流的机会还多一些。从那里面出来的人往往都有一种神经症，什么事都跟别人比想看看谁厉害，谁“优秀”，娱乐活动都不例外。以至于你怀疑他们是否知道自己为什么活着。

中国人太多，而且虽然口头上说是什么“有中国特色的稀里糊涂主义”，其实实行的是比资本主义还要不合理的分配制度，社会的资源越来越集中到极少数人手里或者被浪费掉，导致极度的贫富分化。再加上自古以来的科举制度和“书中自有……”的误导，绝大多数人涌向大学，涌向研究生院。所以学术腐败虽然是世界范围的现象，但在中国就更加厉害一些。

关于这种“生产力”和“社会生产关系”的冲突，我们从小上政治课就背过了，不是吗？虽然政治课本大部分是扯淡的教条，但极少数几条不是中国人又不是俄国人发明的理论还真是管用的。死记硬背的东西人是永远不会理解的，只有切合实际才会发现，某些德国大胡子说的其实是真话，是科学道理。

这些都是我们个人没有力量改变的事情。那么这篇文章有什么用呢？

首先，有些知识是有指导意义的，知道了总比不知道的好。知道了学术界的游戏规则有利于我们玩转它，利用它，却避免它的弊端。比如，我早就知道了学术界的鬼把戏，所以我根本没有为成为它的一员做很多努力。从进入 IU 以后我就不在乎自己的考试成绩和论文发表，因为我知道除了学术界，几乎没有人关心这些。我知道有些领域整个都是扯淡的，所以得个高分不但对我一点用都没有，反而浪费了我的时间。所以除了自己喜欢的课程不拿A+都没办法以外，其它的都是按照能拿到学分的最低标准进行。我利用学校的资源学到了自己需要的东西，却没有为一些扯淡的论文之类花很多时间。每次做教授的 RA 都会发现是在做扯淡空洞的话题，所以我后来选择了做 TA。干这种“体力活”避免了脑力的冲突，自己才有机会去研究自己感兴趣，有价值的东西。由于我知道助理教授们的生存现状，心理以及动机，我就比不知道的人做出更好的决定。当同学们怀着崇尚的心情，跟着一些吹牛皮的助理教授做一些没有希望的研究的时候，我自己的研究早就超过了他们很多年。

另外，这篇文章对于广大学术界人士也有一定意义。承认了自己在扯淡总是比举着高尚道德的牌子更加以德服人一些。我鼓励广大正在挣扎中的 PhD 和助理教授们发扬自嘲精神，勇于承认自己的现实和弱点，承认自己其实是不得已为了混饭吃，大家都是混饭吃的。有同情心才会有动力，同学们如果知道了你是在混口饭吃，反而会更加理解你的处境，停止质疑你的做法，进而帮助你继续混下去。

最后，知道事实的人多了，世界自然而然就会改变。很多人进学术界的原因是为了混饭吃，而当社会更多的了解到学术界的这一真相之后，“名校博士”这种东西就会逐渐贬值，失去它原来的光环。人们就会以平常心来看待，最后学术界就不再能吸引那些混饭吃的人，而真正喜欢研究的人也就能自得其所。人们也可以采取甘地的“非暴力不合作”精神，避免成为学术腐败的一部分，就像你知道某个街区经常有吸血鬼出没就不要去一样。这样吸血鬼们找不到食物，邪恶的势力就会逐渐萎缩。知道事实的人们还可以互相鼓舞，发扬正气。腐败的组织慢慢的就会失去人们的支持，走向穷途末路，或者改邪归正。

====== 知识分子的傲慢与偏见======

作者：王垠

　　经历了这么多的事情，见过了这么多不同种类的人，我一直在想，知识分子心里存在的傲慢与偏见是从哪里来，到哪里去的。现在我也许找到了一些线索。

　　===== 傲慢 =====


　　先说说傲慢产生和消亡的规律吧。

　　1. 当我们懂得很少的时候，我们是不会傲慢的，因为自己根本没有值得傲慢的东西。

　　2. 当我们懂得了一些东西之后，傲慢就产生了，因为我们喜欢把自己的某种专业知识看得过于重要，比如对程序员来说就是编程能力。很多人以自己会用某种语言，或者会用某种操作系统为豪。我们会把这些语言或者操作系统的名字放在自己的名字前面，就好像自己的招牌，比如称自己是 Schemer, Linuxer,等等。你会发现，当我们这样做的时候，自己一般都没有能力设计自己的程序语言或者操作系统，所以我们才会把希望寄托于别人创造的东西。所以其实傲慢的人总是在某种东西之“下”，他们并没有思想的独立。

　　3. 当我们学到了深入本质的知识，就会发现其实以前认为很了不起的东西，其实也就那么回事。曾经自己只是“用户”的东西，现在自己成了“创造者”。而最后你发现，这些创造其实根本不是来自于我们自身的“天才”，而是从自然界的各种现象里面“抄”来的。自然界是如此的伟大，相比之下，我们可以说根本没有自己的创造，我们其实一直都只是在学习和摸索。一个人的知识再多，也不可能理解整个宇宙。这个世界上还有许许多多值得学习，值得探索的东西，自己其实一点都不了解。于是我们的心再度敞开，迎接新的知识，好奇心增加了，傲慢也随之消退了。

　　===== 偏见 =====


　　偏见也有差不多的故事。

　　1. 当我们不懂什么东西的时候。偏见是不可能产生的，因为我们对事物了解如此之少，我们根本没有自己的判断。

　　2. 当我们学到了一定的程度，偏见就产生了。我们总是会忽然觉得某种东西是“救世主”，从而迅速的成为它的崇拜者。“精通”某种东西（比如程序语言）的人，往往觉得不会用这东西的人都低他一等，经常会为这些东西孰好孰坏争论得面红耳赤。他们会跟使用同样东西的人扎堆，结成“阵营”。阵营之间互相竞争和攻击，“敌人”的东西就算是好的我们也要嗤之以鼻，“自己人”的东西就算不好的我们也要把它捧起来。

　　3. 当我们得到了深入的知识，就会发现这些东西全都有自己的缺点，没有一个是完美的。所以我们就不再很关心这些东西之间的“宗教斗争”一类的事情，会觉得这些争论很无聊。与其支持某个东西，反对另外的，还不如把精力节省下来，自己做一个比它们都好的。所以当一个人有了强大的创造能力，偏见也就随之消退了。

　　所以你看到了，傲慢和偏见都有一个从无到有，然后逐渐消亡的规律。我很清楚的看到，这些已经发生在了我的身上。虽然我经常在博客提到 Scheme，其实我自己并不是 Scheme 的“支持者”。我知道它有什么毛病。我从来不称自己是“Schemer”，我也很少关心 Scheme 的“标准”，比如 R5RS, R6RS。我使用 Scheme 的原因是因为我需要一种语言来描述我想说的东西（比如解释器），而 Scheme 是现有的最简单的可以说明这些问题的语言。实际上我不是任何语言的支持者，管它是 C++， Java, Python, Scheme,Common Lisp 还是 Haskell, OCaml, Clojure, ... 它们对我来说都是差不多的。它们的“社区”经常喜欢把缺点说成是优点，把“对手”的优点都嗤之以鼻，把某种概念说成是包治百病的灵丹妙药。这个现象是普遍存在的，就算是 Haskell 和 OCaml 的社区也不例外。

　　所以我脑子里一直在构想的，其实是一种新的语言。它没有任何的宗教成分，并且不断的完善自己，消灭自己的弱点，简化自己的设计，最终成为世界上唯一需要存在的“终极语言”。

　　
====== “解决问题”与“消灭问题” ======


一直以来，人们都重视“解决问题”的能力，却忽视了另一种重要的能力：“消灭问题”的能力。各种各样的竞赛，分数和排名，让很多人从小就片面的认为，能“解决问题”的人，就是最厉害的人。拿到一个问题就埋头求解，很少考虑这问题到底有什么意义。这种呆板的思维方式，不仅存在于低级的“应试”和“解题”过程，而且蔓延到了很多艰深的研究领域。

如果你仔细观察就会发现，很多“难题”，其实是“人造”出来的，而不是“必然”的。它们的存在，往往是由于一些早期的“设计错误”。人造的东西里面往往有设计上的错误，如果你把这些东西看成是不可改变的东西，那你就会遇到很多不必要的问题。打个比方，如果当初轮子被设计成方形的，而没有人质疑这样做的“必要性”，那么也许人类早就因为“能源问题”而灭绝了。有点夸张，但它却形象的说明了，为什么错误的设计会导致不必要的难题。

其实如果我们转换一下思路，或者改变一下“设计”，很多问题就可以不解自消。这就是我所谓的“消灭问题”的能力。这种“消灭问题”的能力，表面上容易其实难，有点像脑经急转弯，所以经常受到人们的忽视。看到一个问题轻而易举的消失了，总有人满不在乎的说：“这个容易。我也能做到。” 可问题就在于，你怎么没想到？说这种话的人，完全没有意识到，他们的思维里面其实缺少了非常重要的东西。由于喜欢炫耀自己的“头脑暴力”，他们经常解决（甚至制造）错误的问题。

所以，在解决问题之前，我们应该先问自己三个问题：

    1 这问题是否真的“存在”？
        也许你已经看出来了，很多问题，即使众人都认为它存在，其实也可能是不存在的。在这一点上不能相信任何人或者机构，不管他有多么的“权威”。就像小马过河的道理，只有靠自己的实践。
    2 如果解决了这个问题，会给我和他人带来什么实际的好处？
        世界上不存在“永远”，也不存在“无穷”。如果一个“科学算命家”花100年才能算出我的未来，那我还不如坐等“未来”的到来。所有的人，都不过是来这世界上做短暂的旅行。所以，问题的答案，应该能在合理的时间之内给人带来实际的好处。
    3 这问题是否可以在简单的改变某些“设计”或者“思路”之后，不复存在？
        很多问题的“存在”，其实是因为人们的“思维定势”。他们看不到问题的“根源”和因果关系，而是经常在下意识里假定某种“先决条件”（A）的存在，然后坚定不移的相信由此“导致”的问题（B）的存在，如下图：
             A -----> B
        然后，他们开始呆头呆脑的解决 B，完全忘记了质疑 A 存在的必要性。他们从来没有想过，如何消除 A，或者切断 A 与 B 之间的关系。他们没有发现，一旦这前提 A 不复存在，问题 B 就可以不解自消。

对这一点，我想起一个有趣的故事。有人在饭桌上给大家出了一道“难题”，要他们把自己盘子里的鸡蛋立起来，最后只有一个人做到了。这个人把蛋壳打破了。所有其他人都没有想到这个做法，却说他“犯规”。可是应该检讨的其实应该是他们自己，因为出题的人根本没有说不能打破蛋壳，他们却对此做出了错误的假设。

我经常发现计算机科学界存在这样的问题。研究了几十年，结果到最后才发现，辛辛苦苦解决的问题，其实包含了错误的假设。如果换一个角度来看，或者稍微改一改设计，这问题就基本不存在了。其中一个例子，就是编译器里面的“语法分析”（parsing）问题。

语法分析成为一个问题的原因，就在于很多人错误的以为程序语言应该有复杂的语法。正是这些复杂的语法，造成了这个问题研究了很多年，仍然没有一个很好的解决方案。可是一旦语法设计被简化（比如像 Lisp 那样），语法分析就变成一个非常容易的问题。实际上计算机系统（比如 Unix）里的很多问题都是由此引发的，想要利用字符串来进行数据交换，却又设计了一些非常不方便的“数据格式”。简单的语法设计，会让这些问题一并消失掉。关于这个问题，我不想重复发文，细节请见另一篇博文《谈语法)》。

爱因斯坦说“想象力比知识更重要”，也许就是这个道理。没有想象力的人经常钻牛角尖，走死胡同，忘记了自己其实还有另外的路可走。



====== 论研究 ======


作者：王垠

很多人称自己在研究，却不明白什么是研究。实际上，恰恰是“研究”这个时髦的词汇，导致了今天学术界的堕落，以至于使得真正希望研究的人离它而去。

每个领域都有它硕果累累的时期，在那个时期随手抓到一个果实，就可能成为某个重要分支的鼻祖。可惜的是，这种时期却不是常在的。当那些最重要的理论全都被发现之后，一个领域的研究实际上就完成了它的使命。在这种情况下人们应该做的，其实是总结这些成果，让它们更加容易的被大众吸收，然后开辟新的领域。可是“研究”作为一种有利可图的职业，却推动着学术界朝着相反的方向发展。第一手的学术成果被各种二手货充斥，以至于它们不被人认识。制造出各种无需有的新名词，或者对已有的简单的理论进行故意的复杂化，使得它们显得高深，让人望而却步。所以其实“研究”并不一定是好东西。如果研究没有带来深入的理解，还不如不要研究。

现在很多的“研究”都可以简单的归为几类：

1. 应用。套用现成的通用理论，做出一些特例，然后发表。打一个比方，这就像发表一篇论文，标题叫《1234 * 5678 = 7006652》。也许在几千年前你可以称这是研究，让大家知道 5678 个 1234 加起来是多少。但是自从有人发表了一篇论文叫做《乘法》，你再写这样的论文就没有任何价值了，因为所有懂得乘法的人一看就知道这是怎么回事。当然并不是每个人都会乘法，所以你做的事是有意义的，至少你应用乘法的知识解决了一个特定的问题。但是解决了问题并不等于你为此写一篇论文就会有意义。论文应该对人有通用的指导作用，看了的人应该可以用它的方法来解决一类问题，而不只是问题的一个特例。知道了 1234 * 5678 对多少人有用呢？这只是一个比方，但是现在的很多论文跟它非常的神似。某些“热门领域”几乎全都是这样的论文，其实它们的作用不过是广告而已。它们的作者只是想告诉别人“我做了这件事”，而不是“做这件事的方法”。

2. 改头换面。因为研究必须是“原创”的思想，所以很多人的做法就是给已有的理论起一个新的名字发表出来。如果你涉足多个领域的话就会经常发现这样的现象。比如我发现“程序逻辑”，“程序分析”和“类型理论”里面的很多概念其实对应同一个非常简单的本质。只有当你看到概念对应的本质的时候才会发现，原来某些人完全是在重复别人的工作，某些领域里面的很多概念都是另一个领域的概念换了一种“说法”而已。

3. 制造问题。有些领域真的是没有问题可解决了。怎么办呢？那就制造问题来解决。就像我的一个同学说的：“有问题要解决；没有问题，制造问题也要解决。”怎么制造问题呢？有一个好办法就是“假设”出一些特定场景。比如，假设某些资源不存在，或者假设某些条件不能改变。本来我们不缺这些资源，条件也是可以灵活改变的，可是你作出相反的假设，问题就出来了。然而很多这些假设，其实都是永远不可能出现的。所以你就做出一些完全不可能找到应用的理论来，或者只找到问题的次优解。

4. 心理战术。有些论文显得很“理论”，但是其实只不过是用一些可怕的符号和公式作为它们的迷彩。因为它们的作者知道，当读者看不懂公式的时候，往往不是怨作者，而是怨自己脑子不好使，所以如果你看到公式就顶礼膜拜的话，那你就上当了。你必须透过那些符号看清它们所表示的本质含义，才会发现作者的把戏。可是反过来如果你自己不了解这些本质，那么你就看不透那些符号。这个“鸡与蛋”的矛盾就是很多数学家和逻辑学家的看家法宝。数学和逻辑的书很难看懂，也就是这个原因。对于这些符号公式的受害者，我建议你们去看看现代逻辑学鼻祖 Frege 的一些论文（特别是Begriffsschrift）。看看他是如何用直观的图形来描述最抽象的逻辑，看看他如何指出数学所用的语言给人们的理解带来的混乱。也许从他的文章你会发现，原创的思想其实往往比二手的容易理解很多。

也许从古至今都是这样，有知识的人喜欢把知识垄断，让没知识的人知其然而不知其所以然。让他们去套用我们想出来的公式和定理，证明给他们看这些是正确的。但是不要告诉他们这些公式和定理是怎么想出来的，不要把知识的“生产工具”给他们。这样这些人就不可能想出跟我们同样水准的公式，就会把我们当成“天才”供养起来。大学里的教授们其实很多时候是故意不告诉你一些公式背后的直觉。很多经典著作的作者也是一样的做法。人们所谓的“尊重权威”，其实跟“新来的小弟乖乖听话”类似。如果你真的去“尊重”他们，依照他们的思想去研究，你就永远也跳不出他们给你设置的知识壁垒。

所以，学术的“霸权主义”其实已经由来已久了。有什么办法可以突破这道壁垒呢？其实每个人都可以做的一件事情就是：藐视权威。当然，藐视权威并不等于对他没礼貌，而只是在心理上把他真正的作对一个普通人对待。不卑，不亢，不盲从，相信自己的力量。就像纳什的传记《美丽心灵》里所描述的，纳什不看论文不看书，全凭自己的能力重新把整套的理论想出来，不盲从任何权威。很多人都没有意识到，其实他们自己也是可以做到这些的，可是他们总是认为他们不是“天才”，所以不可能做得到。思想的唯一限制，其实是人的信念。只有相信自己能做到，你才能做得到。

本来研究这活动，从前是贵族阶级吃饱了没事干的消遣，而它现在却成了穷人以为可以用来通往更高阶级的光明大道。贵族做研究就像编笑话，不好笑的笑话，就不用讲给人听了。可是穷人做研究总是为了一点研究经费就像和尚一样去化斋，给我钱我就随便念一段经给你听，反正你也听不懂。也许唯一的根治这个问题的办法是实现罗素所设想的，真正的“社会主义”。想一下吧，世界上的资源其实足够每个人活得好好的了，机械化大生产也实现了，为什么我们还在这么拼命的工作呢？为了毁灭地球吗？我们应该对每个人都实现一星期五天，一天四小时的工作制，这应该足够支持每个人的衣食住行。之后每个人就都可以像从前的贵族一样，可以进行一些高雅的娱乐活动和真正的研究了。

这一天会来到吗？

====== 理论是围城 ======


作者：王垠

发了上一篇博文之后，很多人来信表示慰问。在此深表感谢。回想这么多年来的经验，真是有点乾坤扭转的感觉。曾经认为是错误的东西，后来又觉得是正确的，过一段时间它又好象确实是错误的。真是捉摸不定。

　　就拿之前遇到的问题来说吧，其实就是一个对待理论的态度问题。人们往往对数学一类的“纯理论”学科充满了敬畏和盲目的崇拜，看到别人论文里出现一堆数学公式就觉得很了不起。可是殊不知，理论的东西作假的可能性其实比“coding”这种“低等活”要大很多。程序的代码都是可以运行的，直接一跑，谁快谁慢，谁正确谁错误，经常都一目了然。可是理论的东西却说不准，里面如果有错误甚至“抄袭”，就算你是顶尖的研究者，都不一定看得出来。

　　这就是为什么某些完全不可能有实用价值的理论能够在某个时期风靡学术界，甚至召开自己的会议。举一个例子就是上学期被我判“死刑”的一种类型系统，叫做 intersection types，到现在都还存在它的 workshop（通常跟 LICS 会议在同一个地方召开）。可是这个类型系统却几乎是完全不能实用的，因为它的类型检查需要的时间跟运行这个程序是一样的。类型系统的初衷就是在程序运行之前迅速的查找出错误，如果你花跟运行这个程序同样多的时间来检查它，那么你还不如就直接运行这个程序！我很惊讶的是人们花了 20 多年才发现这个问题，而且在发现了这个问题之后还继续研究这个东西。幸运的是，我只在上面花了两个星期不到就实现了这个系统，并且发现了这个问题。后来看了著名的 Benjamin Pierce 的博士论文，就是关于 intersectiontypes。铺天盖地的公式，其实基本没有任何意义。后来又跟这领域的某头号大牛（不是 Benjamin Pierce）发 email，试图得知这个系统是否能够实用。来回一趟之后，就再也没有了消息 :)

　　“抄袭”的判定在理论的领域也很纠结。到底谁的思想是原创的？什么样的行为算作抄袭？这是无法说清楚的。很多当今程序语言界最时髦的话题，其实在几十年前早就有人提出来了。很多时候做理论的人都在“重复发现”以前的结果，到头来很难说清楚他们的论文里有什么“新东西”。你甚至不可能跟他们“理论”。如果你说理论A跟理论B，实际效果是完全一样的，你有什么证据呢？有趣的是，就算你觉得是几句话就说得清楚的事情，它们的支持者也会视而不见，要求你用“数学证明”的方式证明你的说法。可是某些人的公式和证明是如此的丑陋，就像一个人写的程序代码毫无章法。你愿意花功夫去证明他的理论跟另一个是等价的吗？所以你就懒得去跟他们说了。你就说，你们信就信，不信就算了。

　　其实学术界最严重的问题就是总是要求“新”的东西，“独创”的东西。研究了快一百年的领域，每年有那么多的会议，哪里可能有那么多新东西啊。所以大家就开始给老的概念起新的名字。

　　理论就像一个围城，外面的人想进来，里面的人想出去。其实我最想做的事情是做一些实际对人有用的，工程性质的东西。当然，之前学会的理论很可能在里面会起到重要的作用。

====== 谈创新 ======


有人告诉我，我所说的很多事情只是在已有的事物上面挑出毛病来，那不能引起真正的“创新”。这使我想到了一个很久以来思索的问题：什么是创新？创新真的那么重要吗，它的意义何在？最后我得到的结论相当的惊讶，世界上并不缺少创新，而是创新过剩了！大量的所谓“创新”，让人们的生活变得纷繁复杂，导致他们需要记住更多事物的用法，而无法专注于利用已有的设施，最大限度的享受生活的乐趣。

最缺乏创造力的人，往往是最爱标榜创新的。这些人（或者公司）不是为了设计出好用的东西，而是为了成名，是为了创新而创新。也就是这种人，最不重视吸取历史的教训，所以他们制造出来的“新事物”不是给人们的生活带来了方便，而是带来了不必要的复杂和麻烦。这种人的创新，只不过类似于给自己染上五颜六色，形状奇怪的头发，在自己身体上最特别，最显眼的地方进行纹身或者穿孔带环。创新不等于美，而且往往是与美背道而驰的。真正的美人，视皮肤为上帝赐予的最宝贵的衣服，绝对不会让任何所谓的“艺术”玷污它无暇的美。上帝的手艺是无人能敌的，所以那些不美甚至丑陋的人嫉妒了，他们要设立新的“美学标准”，于是他们开始纹身，穿孔，染头，奇装异服…… 现代社会很多所谓的“创新”，只不过是这种现象在技术领域的再现。

创新往往也是与良好的设计理念背道而驰的。一个好的设计，总是力求减少“新”的感觉，而着重于让整个设计浑然一体，天衣无缝，用起来顺手。最好的设计就是让设计的目标消失掉，或者感觉不到它的存在。

下面我举几个用巧妙的设计来避免创新的例子。
===== 房屋装修 =====


中国人装修房子，可谓是创新相当的丰富了。各种稀奇古怪，穷形尽相的地砖墙砖，门把手，电源开关，水龙头，淋浴器，浴缸，喷头，地漏，热水器，洗衣机，微波炉，电冰箱……

到了美国你才发现，美国人房子里的设备根本没有这么多花样。每一种设施几乎都有固定的，经过千锤百炼的设计，所以你随便到哪个朋友家里，发现那些东西都没什么特别。因为不好用的设计早已经被淘汰掉了，剩下来最好用的，其实没有几种。

就拿电灯开关来说吧，美国的几乎所有房子，不管是便宜的出租房，还是高档一点的所谓“别墅”，电灯开关都是最简单的，不打眼的，就像中国早年工厂车间里那种“摇杆式”开关。所有的开关都一个样，所有的摇杆都一个大小，根本没有中国的开关这么多花样。

这种开关首要的特点是安全，因为你不容易由于不小心靠在开关上而把它打开或者关闭。这种开关安装时一般向上是开，向下是关，摇杆的位置很明显，所以一眼就看得清楚它到底是开着还是关着。由于有一个很明显的突起的杆，所以半夜里你摸黑也能操作这开关，而不用考虑摸到的到底是开关的哪个部分，用手摸到一个凸起，向上一拂就开了。

其它设备也只有非常少数的变种。然而让人惊讶的是，这每一种东西都比中国家庭里的上百种不同的设计更加好用，而且是想都不用想就知道怎么用。非常不起眼的，用了十几年的投币洗衣机，也比国内最新最炫的洗衣机洗得干净。而且中国家庭里缺少一种非常重要的设备：干衣机。美国的干衣机都是与洗衣机分离的，干衣机的马力相当的大，而且有一个很粗的铝箔管（像中国的抽油烟机管子），用于把水蒸气排到室外。这种简单价格又不贵的干衣机，不知道节省了多少麻烦，让晾衣服这种繁琐的工作成为了历史。中国人爱创新，于是他们发明了“好太太晾衣架”之类的东西。最近有些人变聪明了一些，在洗衣机里面加上了一体的烘干机，价格不菲。然而他们的烘干机却没有那根排蒸汽的管子，而是靠冷凝压缩水蒸气。这比起那便宜的软管，看起来真是“先进”和“创新”，然而它的效果永远都不会比有管子的干衣机好。

美国人的卫生间没有地漏这种东西，也没有防滑地砖，因为美国人的生活有先进的“水隔离”理念：房子里面可以沾水的地方，与不能沾水的地方是完全隔离的。能沾水的地方包括洗脸池，浴缸，厨房水槽。其它地方全都不沾水，包括浴室的地板。浴室的地板上根本就没有可以下水的地方，一般是用整体的聚乙烯材料做的，所以光脚踩上去也不会感觉冷。由于没有缝隙，所以不可能塞进脏东西。有人就疑惑了，要是水弄到了地板上，怎么排水呢？答案是，除非出了比较大的事故，几乎永远不可能有大量的水弄到地板上。因为洗澡站在浴缸里，拉上浴帘，浴帘的下边沿塞到浴缸里面，所以洗澡时水永远不会溅到浴缸外面。总有一张干的浴巾在伸手可以拿到的地方，洗完澡用浴巾擦干全身再出来，所以水永远不会弄到地板上。所以美国的浴室里没有防滑地砖，没有地漏，没有拖把，却异常的干净，没有异味。由于水不会乱溅，大部分美国人的浴室里没有墙砖，而是涂上颜色温馨的漆，电源开关和插座也不需要防水的盖子。大部分中国人不理解这种生活理念，他们洗澡总是把水弄得到处都是，而且喜欢拿水冲浴室的地板。所以他们创新，制造出各种先进的“防滑地砖”，“潜水艇地漏”，“快干拖把”一类的东西。再在浴室里贴满墙砖，整个浴室仿佛就是一个大马桶。他们没有想到，只需要一个10块钱的浴帘，改变很小一个生活习惯，这些所谓的创新，都可以不存在了！

有人问，如果美国的浴室真的出了重大事故（比如水管爆了）怎么办呢？你需要请人拿水泵来处理。不过这种机会是非常少的。
===== 银行 =====


中国的银行也爱创新。各大银行都推出一代又一代的“电子狗”或者“U盾”，号称可以保护用户的账号安全。这每个U盾都需要一个特别的浏览器插件，而且没有一个是支持 Mac 的。每次回国都发现我的U盾被淘汰不能用了，又得去花钱另外办卡。而且这U盾一旦丢失，又得亲自去网点排长队办理手续，生命就这样浪费掉了。在中国网上购物，付账时要问你，信用卡是哪家银行的金卡，银卡还是白金卡…… 列出几十个选项。银行网上转账，问你的卡是在哪个城市的那个网点办的。老天，我五年前在北京办的卡，我怎么记得是哪个网点！

美国的网银根本没有所谓U盾这种东西，没有必要安装浏览器插件，直接用最普通的浏览器就可以上。你只需要记住用户名和密码就可以使用网银，但这并不等于不安全。美国的网银有防止盗用的安全设计。比如“安全提问”，提示你输入一些只有你自己才能回答的问题，比如你妈妈的小名，你中学的名字。还有 IP 检测，记录计算机的安全级别等等。而且这些网银能完成中国的银行无法完成的很多事情。由于这个原因，美国银行的办事处排队的人非常少（因此没有取号机这种东西），因为大部分业务都可以通过网络或者电话来完成。有些银行甚至根本没有办事处，所有操作全部通过网络，电话，邮局进行。网上购物付账，只需要选择是 VISA，Mastercard，还是 Amerian Express（选项只有不超过5种），而不需要选择发卡的银行以及卡的型号（金卡，白金卡，返现卡，里程卡……）。美国银行转账，只需要提供目标银行的 routing number（银行的标识号）和账号就行。每个银行都是一个整体，没有支行和地域的概念，所以转账也没有必要说明是哪个支行开的户。

由于美国信用卡的先进和简单，大部分交易全都通过信用卡完成而不是现金，再加上支票的使用，所以你很惊讶的发现，美国银行的办事处没有防弹玻璃，而只有很简单的柜台，就跟旅馆的前台一样。为什么呢？因为银行网点里面根本就没有很多现金可以让你抢，你去抢饭店可能还划算一点 :P

美国的钱没有中国多吗？美国的银行没有中国多吗？可是为什么就中国的银行喜欢创新，制造出各种U盾，浏览器插件，防弹玻璃，取号机，而美国却喜欢利用巧妙的设计，使得人们的生活返璞归真？

补充：有人跟我说支付宝基本上已经解决了银行的U盾带来的不方便，但是我认为支付宝永远也不能解决我所提到的问题。这是因为钱最终还是从银行转入到支付宝的，为了转账到支付宝，你又需要插入U盾，所以U盾一旦丢失，你就没法用支付宝了。还有人说手机银行解决了U盾的麻烦，然而这只不过是用手机（另一种物理设备）代替了U盾。如果你把手机丢了，或者你出国旅行，或者你欠费了，急需操作网银怎么办？这貌似一个鸡和蛋的问题。
===== 美国和中国 =====


在这里提到美国的优秀设计，并不是说我更喜欢美国。每次提到这些，总有朋友感觉不平，仿佛觉得我是“美帝的走狗”一样。我其实对任何国家都没有特别的感情和归属感，我的感情只针对个人，而不是国家。实际上，我认为国家这种东西是不必要存在的。美国人对我显然没有很多中国人对我好，然而技术和设计是没有国界的，好的东西不学就等于永远落后。很多中国人喜欢用所谓的“民族自豪感”来代替理性的思考，看不到自己的问题。中国为什么到现在还属于第三世界国家，恐怕就有这里面的原因。没有用心，就不能提高。中国的经济发展了，国家的总资产可以说已经很多了，然而有很多东西不是钱就可以买来的，它需要用心设计。看，我在美国受了这么多的苦和委屈才学会了这些，如果你们不理解消化，那多可惜啊。

美国人在硬件上的设计意识，可以说是深入人心。美国人的设计能力，可以说是达到了出神入化的地步。非常不起眼的一个东西（比如门把手，水龙头），里面可能已经包含了几十几百代不同的设计。设计师们会把历史上各种不同的设计的优点吸取，而把不好的地方改善。在美国生活了很多年的人回到中国，自然感觉各种不顺手的地方，然而并不是每个在美国的中国人，都仔细的思考了我所观察到的先进设计，所以他们虽然发现不方便，却不知道为什么不方便。很多中国人在美国生活，却没有学到他们的生活习惯里面好的部分。

然而美国人在软件，特别程序语言上的设计能力还远远不够，所以才出现了这么多程序语言。美国大公司和国防部标榜着“创新”的旗号，结果设计出的每一种语言都没有完全吸取历史的教训，反复的犯同样的错误，以至于有些语言制造的问题比它们解决的还多。其实程序语言里面哪有很多可以创新的地方呢？如果一个语言能够避免已知的所有设计问题，那它就已经可以比现有的所有语言好了，它不需要任何新的功能。
创新已经贬值

所以创新的能力和“找毛病”的能力，我更看重后者。我觉得创新的价值和重要性，被人们过度的夸大了，以至于成为了一种吸引眼球的广告词。一味的试图创新而不仔细思考，是人们的生活由于各种“新事物”而变得复杂的重要原因。这就是为什么有人问我 Yin 语言有什么“新功能”，我都觉得可笑，无法回答他，因为对于一个语言设计者真正重要的事情，并不是创新。

我喜欢观察人使用一种物品或者一种语言时的行为和心理状态，经过理性的分析，从而理解到底他们遇到了什么问题，到底什么才是合理的设计。没有任何设计是全新的，只有非常有必要的时候，我才会考虑加入新的功能。而且这些新的功能必须经过反复的推敲和实际的考验，确保它们不会带来新的问题。

只有你能从已有的东西里面看到实质的问题，你才有可能达到天衣无缝的设计。设计不需要全新的，它必须最大限度的让人可以方便的生活，而不需要记忆很多不必要的指令。否则如果你不吸取历史的教训，做出所谓“全新”的设计，那么你很有可能不是解决了问题，而是制造了问题。我觉得有一句话说得好，忘记历史就是毁灭未来。
===== 推荐读物 =====


鉴于中国很多东西缺乏设计思想，我建议每个中国人都看看这本书：The Design of Everyday Things，你一定会有焕然一新的感觉。
======写书计划 ======


好些人问过我写书的事情。我确实该写本书了。计算机科学，其实根本不是科学，它缺乏基本的科学精神。计算机“科学”里面的少量真知灼见，已经被大量的商业动机和“天才语录”给淹没。这个领域的所谓“知识”，其实90%以上都是扯淡，或者是死板的教条和本本主义。剩下不到10%，却是非常好的东西。

这种瞎蒙混骗的风气，从图灵那一辈就开始了，以至于好的东西和不好的东西，永远的混在了一起，没法区分开来。你可以提出一个完全没用的理论，却仍然有人相信它是伟大的发明，并且拿到图灵奖。很多经典的书籍，其实让人知其然而不知其所以然，很多甚至把简单的问题复杂化。因为它们的目的，其实在于掩盖真相，传播谬论，让人恐惧和糊涂，以至于人们以为计算机科学博大精深，有无穷无尽的东西要学。

我希望能够改变这个格局。上次写的《编程的智慧》，其实就是这样一本书的开端。这其中的内容，真不是拿一个名校的CS PhD，当个教授或者Principle Engineer，甚至Chief Architect就能搞清楚的。之所以叫做“开端”，是因为它还没有达到我希望的组织和清晰程度。这样的内容以blog的形式出现，已经显示出它的弊端了。Blog组织内容的方式是按时间，blog的单元是文章。由于我希望写出的内容，有效性是接近“永恒”，而且由于内容比较多，需要多层的目录，逻辑组织上blog也无法应付。所以我必须用书的形式写出来。

写这样一本书，不是什么大不了的事情，然而它对于混沌不堪的计算机科学界，恐怕具有转折性的意义，所以我必须使用一种世界上大部分人都能看懂的语言。那种语言在现在看来就是英语。我会把这本书的初稿放在网络上，供人们免费下载阅读，这样他们可以给我有益的反馈，提醒我谬误和不清晰之处。这本书会覆盖计算机科学的方方面面，从程序语言，操作系统，到数据库，网络系统，……

有人可能以为这是一个可望而不可即的，包罗万象的宏伟目标，那只是因为他们没有看穿CS里面的迷雾。如果要面面俱到，照本宣科，把每个子领域的死知识都一股脑写进去，包括每种操作系统命令，每种语言的用法，每个数据库的API，各种乱七八糟的WEB技术，…… 那当然是一辈子也写不完的。然而如果你看透了这层迷雾，就会发现CS里面的精髓部分其实没有很多，它们完全是可以在短时间里掌握的。

所以这本书的定位，在于精髓和创造，而不是细节和死记硬背。我希望把它们共同的精髓提取出来，而去掉其中肤浅的死知识部分。如果你希望它教会你所有的东西，包括某最新语言新加入的特性，或者某最新big data工具的API，那显然是不可能的。有太多的书籍可以教会你那些东西，所以不用我来费工夫。然而我所介绍的精髓概念，应该可以帮助你设计和创造出这样的语言特性和大数据工具，而不只是成为一个被动的使用者。

在初期的时候，我会把书的内容放在网上，供大家免费阅读，提出宝贵意见。等到这本书达到我满意的程度之时，我也愿意让高水平的出版社，印成纸张出版。不过出版社的位置，应该处于“转载”的位置。免费下载的PDF，会一直得到更新和补充。只有这样不断地改进，这本书才能达到我满意的地步

====== 创造力的真正含义 ======


作者：王垠


　　创造力的真正含义

拥有创造力，意味着别人都在看球赛的时候，你独自在操场上练球，欣赏那球飞出去时的弧线。

拥有创造力，意味着让你最开心的事情不再是享受别人的创造，而是创造。

拥有创造力，意味着你会从非常不起眼的小东西里面得到启发，而当你兴高采烈的告诉其它人的时候，会遭遇到他们司通见惯的语气。

拥有创造力，意味着你不再能从本领域专家的嘴里得到启发。你会更喜欢跟完完全全的外行讲话。你会把世界上最难的一些问题编成小故事讲给你可爱的女朋友，而她的回答，经常莫名其妙撞上你梦寐以求的答案。

拥有创造力，意味着你会在所有的东西身上看到可以改进的地方。你会怀疑设计这些东西的人其实根本没用过他们自己的产品。

拥有创造力，意味着你会永远像一个小孩。你会看到所谓的“大人”们看不到的可能性，这些“大人”有可能比你还要小几十岁。当你告诉他们自己的想法时，他们的反应总是让你失望。在父母的眼里，你总是不能成熟，而在你的眼里，父母和其他人一样，看不到其实他们自己才是真正不成熟的人。

拥有创造力，意味着你人生中遇到的最大障碍不再是技术的难题，而是人类的愚蠢。你人生最大的错误，是低估了这种愚蠢的力量。

拥有创造力，意味着你会非常孤独。别人推崇至极的东西在你眼里不过是小菜一碟，所以人们会认为你不是他们的同类，而优先与同样的狂热分子为伍。你有时甚至会发现自己没有逃避的自由，没有不跟着起哄的自由。

拥有创造力，意味着你经常会为了得到最底层的启发，问一些貌似很基础的问题。有些人看到这些问题就会以此作为你水平不够的证据，从而以为可以凌驾于你之上。如果是在 IRC 聊天室，他们会说：“去，读了文档再来问！”

拥有创造力，意味着你有比别人大很多的安全感，你不会理解，上司或者导师为什么会害怕你不能完成项目，因为他们永远不会看到，也不会相信你能看到的东西。你会需要反反复复的安慰他们，但他们仍然会像拿到新衣服之前的皇帝一样派人来打探你，看你是不是真的在制造传说中那能够鉴别 IQ 的布料。

拥有创造力，意味着你不会再在乎人们不知所以的赞许。大部分时候这种赞许反而变成了对你能力的侮辱，所以你多希望他们什么都别说，特别是不要当着众人的面，因为你知道，这除了引起其他人的嫉妒和敌意，没有任何其它作用。你会想在地上找个缝钻进去。

拥有创造力，意味着你自认为的一些雕虫小技会被人当成是大作，而自己真正满意的大作却由于看起来小，没有人理会。每当你做出一点什么，人们就以为你是什么，从而把你的一生定格在那里。他们不明白，你的价值不在于你做的东西，而在于你自己。你是没有界限的人。

拥有创造力，意味着你会分不清什么是新的想法，什么是旧的想法。因为不管别人看起来新的还是旧的，都是你自己想出来的。因为你忙着创造，你没有时间去追究一个想法别人是否已经有了。你只知道什么是好的，管它是新的还是已经有的。你知道自己可能是在重新发明轮子，但是你知道，当把轮子全部都发明完了之后，除了发明新的东西你别无选择。你会发现，发明轮子是非常重要的练习，因为没有发明过轮子的人，他们也发明不出什么特别好的车子。

拥有创造力，意味着你会很难找到工作，因为面试你的人会提出很多需要死记硬背的问题。面对他们的时候，你根本不知道那些术语是什么，然而等你回头一查，发现它们是自己几年前想出来却又抛弃了的，没有名字的主意。

所以，拥有创造力带来的更多是苦难和孤独。可是如果上天再给你一次可以抛弃它的机会，你仍然会毫不犹豫的说，不！

====== 创造者的思维方式 ======


我不知道人们是怎么回事，缺乏想象力还是怎么的，所以我跟其他人对话常常遇到类似的问题。

我：A其实不怎么好。
其他人：你说A不好，难道你要我用B？

（对于政治爱好者，如果A是资本主义，B就是社会主义；如果A是美国，B就是中国，等等。对于IT人员，如果A是Unix，B就是Windows；如果A是Vim，B就是Emacs；如果A是关系式数据库，B就是NoSQL数据库，等等……）

然后呢，这人就会深信我是B的拥鳖，进而产生敌意。这种对话越说越糊涂，越说越尴尬，越说我越觉得降低我的身份。

仔细分析之后，我发现了这问题的起因，其实是因为我跟其他人的思维方式是完全不同的。我总是从一个“创造者”的角度说话，而对方却站在“使用者”的角度。站的高度不同，当然就没法沟通，鸡同鸭讲。

创造者说“A其实不怎么好”，他的意思往往不是说你应该去“用”别的什么东西。他的意思其实是，A不怎么好，我可以把它的缺点去掉，“创造”一个更好的东西。这里的区别就在于“用”和“创造”的不同。使用者说“A不好”，是无可奈何的抱怨；创造者说“A不好”，却是对改进机遇的欣喜。可惜的是，使用者永远无法理解创造者的心，创造者的喜悦在使用者的头脑里，直接被“翻译”成了抱怨。

创造者拥有使用者没有的能力，他能够随心所欲的制造出新的事物，而不带有现存事物设计的思维枷锁。创造者因此具有比使用者更高的安全感，更深的远见，更豁达的胸襟。他不容易陷入非此即彼的“宗教冲突”，他不需要选择任何一个“阵营”，因为他对这种冲突的解决方案很简单：创造一个全新的宗教，消灭掉冲突的双方 :)

====== 不要做聪明人 ======


世界上有三种人：聪明人，傻瓜，傻b。傻瓜和傻b的区别是，傻b是令人讨厌的傻瓜。很多人想做聪明人，比其他人都聪明，结果他们变成了傻b。为什么会这样呢？

其实很多人所谓的“聪明”，要么是能够高效的完成一些机械化的任务，要么是能够高效的绕过一些前人的设计失误。他们的所谓“知识”，建立在一堆历史遗留的糟粕之上，他们以记得住这些脆弱的“知识”为豪。所以，这些人连聪明是什么都不知道，又怎么可能成为聪明人？有些人很傻，只会死记硬背，却自认为很聪明，所以他们让人厌恶，进而升级成为傻b。

如果你想做聪明人，那你往往不可能成为聪明人。想做聪明人的欲望，很容易让人变成傻b。有些人随时都在担心自己不如别人聪明，随时都在比较，害怕别人比他更聪明。纳什（John Nash）因为一辈子都在跟人计较谁更聪明，结果发疯了。他还算好点的，很多“天才”因为跟人计较谁更聪明，最后自杀了。世界上最傻的事情，就是拿自己跟别人作比较。跟人比较的结果，最终都是不快乐，甚至给自己的身心带来伤害。

想做聪明人的欲望，让人变得喜欢争执，喜欢咄咄逼人的想证明自己是对的。它也使人变得固执和盲从，仓促而盲目的相信或者排斥一些事物。有趣的是，这些人选择相信或者排斥的条件，往往在于最后的结果是否能让自己显得聪明。想做聪明人的人，往往只关心自己知道的那点东西，发现别人貌似不懂就穷追猛打，抓住小辫子不放，教育这些不懂的人！却没发现自己有多么无知。因为想证明自己比别人聪明，所以解决问题的时候，总喜欢选择更困难，更复杂，看似更高深的解决方案。结果不但劳神费力，还阻碍了技术的简化和进步。

聪明是可遇而不可求的。聪明可能是一种结果，一种事实，却不可以是一种欲望，一种目标。想要成为聪明人的欲望，多半会让人变成傻b。世界上所有试图成为聪明人的人，终究都会悟出一个道理。他们发现，自己更愿意做一个傻瓜。很多人所谓的“聪明才智”，越来越多的被机器所代替和超越。随着科技的进步，人们赖以生存所需要的死知识，会越来越少。这个世界越来越不需要聪明人，它更需要的是可爱的人。傻瓜往往很可爱。

未来的世界属于傻瓜。所以，我觉得每个人都应该放弃做聪明人的企图，反而应该有做傻瓜的欲望。做一个傻瓜，才能给你真正意义上的实惠和幸福。

====== 牛校综合征 ======


我在牛校待过（清华，Cornell），也在非牛校待过（川大，Indiana）。我见过许多的牛校与非牛校学生，我感觉牛校的学生确实不一样，他们的脑子貌似有一种病。经过很长一段时间，我终于总结出了这病的基本特征，这些症状被我统称为“牛校综合症”。牛校综合症萌芽于进牛校之前的“奋斗”过程，在牛校的人群中互相传染，茁壮成长，然后在毕业后遗传到一些主要由牛校学生组成的公司。

并不是每个牛校毕业的人都会患牛校综合症，但很多都会。我有一些很好的朋友是牛校毕业的，他们却没有类似的问题。所以如果你碰巧是某牛校毕业的，也没必要对号入座。

牛校综合症的主要症状如下：

    - 舔牛校的屁股。好不容易进了牛校，结果发现不是你上了牛校，而是牛校上了你。你不但被牛校上了，而且事后为了自己的面子，还不能说它的坏话。在你后半生中的任何时候，你都会毫不留情的把这家丑外扬的人灭口。
    - 显示牛校的标签。读了牛校，自然想享受不一样的眼光，不一样的待遇。可是如果不贴个标签，自己跟个农民工确实看不出什么区别。所以呢，一个常用的作法就是把自己的网络 ID 加上后缀，比如 shax_thu, shax_pku 一类的。另一种作法就是穿印有巨大校徽字样的衣服（一般是T恤或者hoody）。有些人毕业十几年了还留着母校的衣服，就是因为穿上之后显得牛气一些。
    - 死记硬背，创造力不强。由于牛校一般都不是“为学生服务”，而是“骑在学生头上”的，所以不管哪个国家的牛校，“世界一流大学”，其实大部分都是填鸭式的教育，跟中国的高中没什么两样。在牛校里，很多教授才不管你听不听得懂呢，照本宣科马不停蹄地写黑板，不懂的话你就是笨蛋，不配待在我们学校！牛校学生一般对抄笔记，做（抄）作业，考试非常的在行，对 GPA 非常的关注，而不是很在乎直觉，精髓和思维方法。牛校学生最常见的心理状态，叫做“人心惶惶”。创造力往往是和轻松悠闲分不开的，在牛校如此的忙碌和压力下，创造力怎么可能产生呢？牛校学生往往喜欢显示自己搞得懂各种看似高深，错综复杂的理论，而不喜欢化繁为简，化难为易，因为如果事情变容易了，他们就没有什么优越感了。知识对牛校学生来说是一种负担，而不是珍贵的礼物。学习对于牛校学生来说是一种任务，而不是一种乐趣。世界上最有创造力的天才，其实很多都不是什么牛校毕业的，有些进了牛校辍学了，有很多甚至是完全自学成才，就是这个原因。
    - 过度重视知识，忽视人格培养。知识其实和金钱一样，是庸俗的东西。中国有句很俗的古话叫做“书中自有黄金屋，书中自有颜如玉”，其作用就是把男人都变呆子，把女人都变妓女。牛校毕业并不能说明一个人人品的任何方面，因为牛校的所谓“教育”，根本就不是用来塑造人格的，而是用来训练机器或者牛马的。我就亲自领略过毕业于哈佛，普林斯顿，斯坦福，清华，北大等学校的人渣的“风采”。徒有野心和知识，太喜欢“奋斗”，却缺乏“人性”，有些甚至连基本的做人道理都不懂。这些人到了社会上，只会跟希特勒一样，给世界带来灾难。相反，非牛校毕业的人，很多更加随和谦虚，更加有人情味，更加善良，有些在专业上也强很多。
    - 喜欢膜拜和谈论牛人。很多牛校学生其实自己水平一般，头脑里却都是对各种牛人的膜拜和仰慕。他们喜欢拿这些“校友”的名气为平庸的自己撑腰。他们很在乎自己的学校出过什么名人，而没有清楚的意识到他们自己是什么人。
    - 门户观念强，很在乎校友关系。牛校学生对校友有一种莫名的亲切感，毕业多年还喜欢组织校友会，比较排外。非牛校学生跟人交往更加随和，一般都不管你是哪个学校出来的。进入牛校，图的往往不是学识，而是“名气”和“关系”，因为这些穷孩子认为牛校是自己通向“上流社会”的阶梯。所以如果某牛校学生听说你是校友，总是喜欢问“你是几字班的？”然后刨根问底的想了解你的底细和历史。
    - 歧视外校来的研究生（博士生）。所谓“母校”，只是对本科生而言的。如果你本科不在牛校，而是通过考验或者保送进入了牛校，请注意了：你会被牛校的本科生歧视，融不进他们的圈子！本科生们会认为，你本科考不上这个牛校，本科毕业又没能力出国，而考研或者保送（直博）要比高考容易很多，所以你并不是跟他们一样的天之骄子。很多本科生在背地里议论外校来的博士生，都是：“这个人连XX都不会，不知道是怎么进来的！”就连你博士毕业多年以后参加校友会，别人都会问你是“几字班的？”意思是，本科哪一届的？如果你告诉他你是研究生才进牛校的，你就会受到不一样的礼遇。
    - 优越感强，幽默感差。牛校学生一般对自己学校的所有事情都很当回事，开不起玩笑。特别是没有自嘲精神，面对别人对自己学校，教授，或者自己公司的不重视，会非常的恼怒。牛校容易出呆子，不管什么事情，总喜欢故作高深的从“理论”上追究个所以然，而忽略自己对它的简单感受，从而显得很无趣。
    - 爱显示优秀。牛校学生满脑子都是“优秀”，他们太在乎自己和别人是不是优秀。他们所谓的“优秀”其实是非常世俗的，就是将来找得到好工作或者发得了财，而不是给社会带来美，快乐，和平和真正的福利。牛校的女生喜欢找“优秀”的男生做男朋友和丈夫，不顾他们长得是否帅气，是否可爱，善良，浪漫或者有趣。很多女生喜欢一些眼露凶光的“优秀男”，大概是因为她们自己太弱了，没法独立生活吧。牛校学生不关心世界的贫富分化和经济危机，因为他们自己就是这些危机的罪魁祸首。牛校学生喜欢的，其实是一个弱肉强食的野蛮世界。
    - 爱比较。牛校学生喜欢拿自己和别人比较，为自己制造永无止境的高标准和压力。所以牛校学生似乎永远都快乐不起来，因为他们总是这山望着那山高。如果他们嫉妒你，自己却又没法把你比下去，他们就会故意谈论另一个优秀的人，甚至当面拿你和他做比较。总之，他们所做的一切，就是不择手段的让你更加自卑。牛校学生容易跳楼，就是这个原因，因为他们总是感觉其它人都很优秀，感叹自己不如人，而其实呢他们只不过被其他人设计的假象迷惑了。
    - 脑子里都是数字。牛校学生满脑子都是数字：学校排名，考试分数，GPA，级别，论文引用数，会议影响因子，存款金额，年龄，身高，体重，罩杯尺寸，…… 喜欢数字的原因是他们爱比较，数字可以很方便的做比较，不像其他非数字的事物。 由于不重视感觉，他们不能理解数字不能衡量的很多东西：直觉，感觉，幽默，感情，爱，艺术……
    - 缺乏生活情趣和休闲精神，喜欢把娱乐当竞赛。牛校学生对待所有娱乐活动都像专业一样严肃，仿佛他们的生活里除了学习还是学习，除了竞争还是竞争。打个网球喜欢追究挥拍动作的角度，兢兢业业的练习所谓“步法”，喜欢比赛，喜欢参加“分级考试”（又一个爱数字的表现）。跑步喜欢绕着规规矩矩的椭圆或者长方形的路线，喜欢设定固定的距离，跑步时不看风景，不关注身体的感觉，关注的是“成就感”。拍照喜欢用巨大笨重的单反相机，喜欢研究各种专业摄影技巧，拍照的目的主要不是为了自己欣赏，而是为了显示给人看。爬山喜欢追求各种先进装备，拿着个 GPS 去险峻的荒山野岭暴走，不懂得欣赏和享受风景，纯粹的自虐狂。平时喜欢埋头快步走路，因为他们在学校里一般就是这样在宿舍，教室，图书馆三点一线间穿梭。遇到集体爬山郊游活动，牛校男生一般都在前面暴走，把女生远远丢在身后。
    - 喜欢炒作“美女”。由于牛校女生稀少得像大熊猫，所以牛校的女生宿舍一般被叫做“熊猫馆”。一旦有不戴黑框眼镜，看得顺眼些或者稍微会打扮的女生，很快就会出名，然后被男生评为班花，系花，院花，或者起各种绰号，比如“奶茶妹妹”。其实这些女生到了牛校之外真的很一般，可是由于牛校男生见过的美女太少，而且为了反驳外界关于“牛校美女少”的舆论，所以喜欢炒作她们，想让人知道“我们学校也有美女”。而其实呢，牛校的美女能出名，正好说明了那里的美女少。美女如云的地方，美女是出不了名的——天上的云朵有名字吗？牛校男生的几乎一切古怪特征（喜欢显示优秀，把娱乐当竞赛等），很多都是为了赢得那几个美女的青睐。看我 GPA 4.0，钢琴练到十级，网球都打到五级，所以你应该嫁给我！

====== 我和权威的故事 ======


每个人小时候心里都是没有权威的，就像每个人小时候也都不相信广告一样。可是权威就像广告，它埋伏在你的潜意识里。听一遍不信，听两遍不信，……，直到一千遍的时候，它忽然开始起作用了，而且这作用越来越强。

消灭广告所造成的幻觉，最好的办法就是去尝试，去实地的考察它。有些虚幻的东西只要你第一次尝试就会像肥皂泡一样破灭掉。可是如果你不主动去接触它，它就会一直在你脑海里造成一种美好神圣的假象。越是得不到的越是觉得美好。很神奇的一个现象就是，权威对人思想的作用其实也跟广告一样。

上大学以前的人因为没有专业，所以还不怎么崇拜权威，大不了追追歌星，影星，球星啥的。而进了大学之后，就会开始对本领域的权威耳濡目染。一遍，两遍，一千遍的听到同学们仰慕某“牛人”或者“大师”的名字，虽然从来没亲身见过，不知不觉就对这人产生了崇拜心理，然后自愧不如。不知不觉的，自己也开始附和这些说法，不自觉地提到这些大师的名字，引用他们说的话作为自己的行动指南。

Donald Knuth, Dennis Ritchie, Ken Thompson, Rob Pike, ... 就是通过这些途径成为了很多计算机学生的权威。以至于几十年以后，他们的一些历史遗留下来的糟糕设计和错误思想还被很多人奉为神圣。
===== Donald Knuth =====


很多人（包括我）都曾经对 Knuth 和他的 The Art of Computer Programming (TAOCP) 极度崇拜。在我大学和研究生的时候，有些同学花了不少钱买回精装的 TAOCP 全三卷，说是大概不会看，但要供在书架上，镇场子。当时我本着“书非借不能读也”的原则，再加上搬家的时候书是最费力气的东西，所以坚决不买书。我就从图书馆把 TAOCP 借了来。说实话我哪里看的下去啊？那里面的程序都是用一个叫 MIX 的处理器的汇编语言写的。一个字节只有6位，每位里面可以放一个十进制数（不是二进制）！还没开始写程序呢，就开始讲数学，然后就是几十页的公式推导，证明…… 接着我就睡着了。但我总是听说有人真的看完过 TAOCP，然后就成为了大师。比尔盖茨也宣称：“要是谁看完了 TAOCP，请把简历投给我！” 在这一系列的号召和鼓吹之下，我好几次的把 TAOCP 借回来，下定决心这次一定看完这旷世奇书。每次都是雄心勃勃的开始，可从来就没看完过开头那段 MIX 机器语言和数学公式。

看不懂 TAOCP 总是感觉很失败，因为看不懂 TAOCP 就成不了“大师”，可我仍然认为 Knuth 就是计算机科学的神，总能从他那学点什么吧，所以又开始折腾他的其他作品。这就是为什么我开始用 TeX，并且成为中国 TeX 界的主要“传教士”之一。为了 TeX，我把 Knuth 的 TeXbook 借回来，从头到尾看了两遍，做完所有的习题，包括最难最刁钻的那种“double bend”习题。接着又开始看 MetaFont Book，开始使用 MetaPost 进行绘图。开头还挺有成就感，可是不多久就发现学会的那些 TeX 技巧到了临场的时候就不知道该怎么用，然后就全都忘记了。这就是为什么我把 TeXbook 看了两遍，可是看完第二遍之后不久还是忘记得一干二净。

师兄师姐看到我用 TeX，说怎么折腾这么过时的玩意儿。我很气愤他们以及国内学术界居然都用 Word 排版论文，就开始针锋相对，写出一系列煽动文章鼓吹 TeX 的种种好处，打击“所见即所得”这种低智商玩意儿。这还不够，又开始折腾 Knuth 设计的 MMIX 处理器，并且认为 MMIX 的寄存器环就是世界上最先进的设计。发现一些无关紧要的小错，就给 Knuth 发 email，居然拿到两张传说中的“Knuth 支票”，并且一度引以为豪。当然像所有拿到 Knuth 支票的人一样，你是不会去兑现它的，甚至有人把它们像奖状一样放在相框里。我还没那么疯狂，那两张支票一直在它们原来的信封里。多年以后我到美国想兑现那支票的时候，发现它们已经过期了。

当你心里有了这样的权威，其他人的话你是不可能听得进去的，就算他们其实比你心目中的权威更具智慧也一样。在清华的时候我有时候去姚期智的小组听客串讲座。有一次请来了美国某大学一个教授讲算法，不知道怎么的我就跟他聊起 TAOCP，大概是想请教他如何学习算法。他跟我说 Knuth 的书已经比较过时了，你可以看看 MIT 的那本《算法导论》。可是这位教授的名气怎能和 Knuth 相比，这话我恁是没有听进去，仍然认为 TAOCP 隐藏了算法界最高的机要，永恒的珍宝。

在清华的时候我很喜欢一门叫做“计算几何”的课，就经常跟那门课的老师交流思想。有一次我在 email 里面提到 Donald Knuth 是我的偶像，那位老师很委婉的回复道：“有偶像很好啊，Knuth 也曾经是我的偶像。” 我对“曾经”这两个字感到惊讶：难道这意味着 Knuth 现在不是他的偶像了？在我执意的询问之下他才告诉我，其实世界上还有很多更聪明的人，Knuth 并不是计算机科学的一切。你应该多看看其他人的作品，特别是一些数学家的。然后他给了我几个他觉得不错的人的名字。

现在回想起来，这些话对我是有深远作用的。那位老师虽然在系里的“牛人”们眼里是个研究能力（也就是发 paper 能力）不强的人，但是他却对我的人生转折有着强有力的作用。他引导了我去追寻自己真正的兴趣，而不是去追寻虚无的名气。我发现很多人都在为着名气而进行一些自己其实不感兴趣的事情，去做一些别人觉得“牛气”的事情。我真希望他们遇到跟我一样的好老师。

在现在看来，Knuth 的 TAOCP 就是所谓的“神圣的白象”（white elephant）。大家都把它供起来，其实很少有人真的看过，却要显得好像看过一样，并且看得津津有味。这就让试图看懂它的人更加自卑和着急，甚至觉得自己智商有问题。别人都看过了，我怎么就看不懂呢？其实 TAOCP 里面的大部分算法都不是 Knuth 自己设计的，而且他对别人算法的解释经常把简单的问题搞得很复杂。再加上他执意要用汇编语言，又让程序的理解难度加倍。

有一句话说得好：“跟真正的大师学习，而不是跟他们的徒弟。”如果你真的要学一个算法，就应该直接去读那算法的发明者的论文，而不是转述过来的“二手知识”。二手的知识往往把发明者原来的动机和思路都给去掉了，只留下苍白无味，没有什么启发意义的“最后结果”。确实是这样的，多年以后当我看见 Knuth 计划中的几卷新的 TAOCP 的目录时，发现其中大部分的东西我已经通过更容易的方式学到了，因为我找到了这些知识的源头。

所以之前的那位访问清华的教授说的其实是实话，Knuth 真的落伍了，可是就算在美国也少有人知道或者承认这个情况。有一次看一个对世界上公认最厉害的一些程序员的采访，包括总所周知的一些大牛，以及 ML 的设计者 Robin Milner，Haskell 的设计者之一 Simon Peyton Jones 等人。也不知道采访者是什么心理，在对每个人的采访中他都问，你看过 TAOCP 吗？大部分人都说看过，真是了不起的巨著，很重要啊云云。只有 Robin Milner （如果我没记错的话）比较搞笑，他说我希望我看过，但是可惜实在没时间。我一直把 TAOCP 垫在我的显示器下面，这样我工作时就可以一直看着它们 :)

Knuth 说“premature optimization is the root of all evil”，然而他自己却是非常喜欢用 premature optimization 的人。他的代码里到处是莫名其妙的小聪明，小技巧。把代码弄得难懂，实际上却并没有得到很多性能的提高。有一次看 MMIX 处理器的模拟程序，发现他用来计算一个寄存器里的“1”的个数的代码非常奇怪。本来写个循环，或者用那种从末位减 1 的做法就可以了，结果他的代码用了 Programming Pearls 里面一个古怪的技巧，费了我半天时间才看懂，后来我发现这个技巧其实还不如最简单的方法。就是这些细小却又蹊跷的做法，使得 Knuth 的代码用细节掩盖了全局，所以到最后我其实也没从大体上搞懂一个处理器的模拟器应该如何工作。直到后来到 Indiana 学习了程序语言的理论之后我才发现，其实处理器模拟器（以至于处理器本身）的工作原理很简单，因为它就是一个机器代码的解释器。使用跟高级语言解释器同样的结构，你可以比较容易的写出像 MMIX 模拟器那样的东西。

Knuth 最重要的一个贡献恐怕是程序语言的 parsing （语法分析），比如 LR parsing，然而 parsing 其实是一个基本不存在的人造问题。它的存在是因为人们的误解，以为程序语言需要有跟人类语言一样的语法，所以把程序语言搞得无端的复杂和困难。如果你把语法简化一下，其实根本用不着什么 LR，LALR。我最近给我自己设计的语言写了一个 parser ，从头到尾只花了两个小时，500 行 Java 代码，包括了从 lexer 一直到 AST 数据结构的一切。完全手写的代码，根本没用任何复杂的 parsing 技术和 YACC 之类的工具，甚至正则表达式都没有用。之所以可以这样，因为我的语法设计让 parsing 极其容易，比 Lisp 还要容易。Knuth 过度的强调了 parsing。他的误导使得很多人花了几十年时间来研究 parser，到现在还在不时地提出新的技术，用于设计更加复杂的语法。何必呢？这只会让程序员和编译器都更加痛苦。如果这些人把时间都花在真正的问题上，那今天的计算机科学不知道要美好多少。

几乎每一本编译器教材都花大量篇幅来讲述 DFA, NFA, lexing, LL, LR, LALR…… 几乎每个学校的编译器课程都会花至少 30% 的时间来做 parser，折腾 LEX，YACC 等工具，而对于编译器真正重要的东西却没有得到很多的训练。这就是为什么 Kent Dybvig 的编译器课程如此有效，因为 Scheme 的语法非常简单，我们根本没有花时间来做 parser。我们的时间用在了思考真正的问题：做优化，实现尾递归，高阶函数…… 很多语言梦寐以求却又做不好的东西。这样的课程给了我可以发挥自己潜力的余地，我的课程编译器里面具有大量的独创写法，我的 X64 机器代码生成器生成极其短小的代码，让 Kent Dybvig 都在背地里琢磨是怎么回事。这些东西到现在也许仍然是世界上最先进的技术。

一个人的思维方式似乎决定了他设计的所有东西。Knuth 的另一个最重要的发明，文学编程（Literate Programming）其实也是多此一举，制造麻烦。文学编程的错误在于认为程序语言应该像人类语言，应该适应所谓的“人类思维”。然而程序语言却是在很多方面高于人类语言的，它不应该受到人类语言里的糟粕的影响。把程序按照 Knuth 的方式分开在不同的文章段落里，造成了代码之间的关系很难搞清楚，而且极其容易出错。这个错误与“Unix 哲学”的错误类似，把程序作为一行一行的文本，而不是一个像电路图一样的数据结构。我不想在这里细说这个问题，对此我专门写了一篇文章，讲述为什么文学编程不是一个好主意。

TeX 其实也是异常糟糕的设计。它过度的复杂，很少有人搞得懂怎么配置。经常为了一个简单的效果折腾很久，然后不久就忘了当时怎么做的，回头来又得重新折腾。原因就是因为 TeX 的设计缺乏一致性，特殊情况太多，而且组合（compose）能力很差。所以你需要学太多东西，而不是跟象棋一样只需要学习几个非常简单的规则，然后把它们组合起来形成无穷的变化。

在程序语言设计者看来，TeX 的语言是世界上最恶劣的设计之一，但如果没有这个语言，它也许会更加糟糕。其实 TeX 之所以有一个“扩展语言”，有一个鲜为人知的小故事。在最早的时候 Knuth 的 TeX 设计里并没有一个语言。它之所以有一个语言是因为 Scheme 的发明者 Guy Steele。Knuth 设计 TeX 的那个时候 Steele 碰巧在斯坦福实习。他听说 Knuth 要设计一个排版系统，就建议他设计一个语言，以应付以后的扩展问题。在 Steele 的强烈建议和游说之下，Knuth 采纳了这个建议。可惜的是 Steele 并没能直接参加语言的设计，在短短的一个夏天之后就离开了斯坦福。

Knuth 的作品里面有他的贡献和价值，TeX 的排版算法（而不是语言）也许仍然是不错的东西。可是如果因为这些好东西爱屋及乌，而把他所推崇的那些乱七八糟的设计当成神圣的话，那你自己的设计就逃脱不出同样的思维模式，让简单的事情变得复杂。仍然对 TeX 顶礼膜拜的人应该看一下 TeXmacs，看看它的作者是如何默默无闻的，彻彻底底的超越了 TeX 和 Knuth。

在我看来，Knuth 是个典型的精英主义者，他觉得自己做的都是最好，最有“格调”的。他利用自己的权威和特立独行来让用户屈服于自己繁复的设计，而不是想法设计出更加易用的工具。TeX 的版本号每次更新都趋近于圆周率π，意思是完美，没有 bug。他奖励大额的支票给发现 TeX 代码里 bug 的人，用于显示自己对这些代码的自信，然而他却“冰封”了 TeX 的代码，不再填加任何新东西进去，也不再简化它的设计。当然了，如果不改进代码，自然就不会出现新的 bug，然而它的设计也就因此固步自封，停留在了几十年以前。更奇怪的是，“TeX”这个词居然不按照正常的英语发音逻辑读成"teks"。每当有人把它“读错”，就有“高手”打心眼里认为你是菜鸟，然后纠正：“那个词不读 teks，而要读‘特喝’，就像希腊语里的 chi，又像是苏格兰语的 loch，德语的 ach，西班牙语的 j 和俄语的 kh。”也许这就叫做附庸风雅吧，我是纯种的欧洲人！;-) 当一个软件连名字的发音都这么别扭，这么难掌握，那这个软件用起来会怎样？每当你提到 TeX 太不直观，就有人跟你说：“TeX 是所想即所得，比你的所见即所得好多了！”可事实是这样吗？看看 TeXmacs 吧，理解一下什么是“所见即所得+所想即所得”二位一体。

我跟 Knuth 的最后一次“联系”是在我就要离开清华的时候。我从 email 告诉他我觉得中国的研究环境太浮躁了，不是做学问的好地方，想求点建议。结果他回纸信说：“可我为什么看到中国学者做出那么多杰出的研究？计算机科学不是每个人都可以做的。如果你试了这么久还不行，那说明你注定不是干这行的料。”还好，我从来没有相信他的这段话，我下定了决心要证明这是错的。多年的努力还真没有白费，今天我可以放心的说，Knuth 你错了，因为我已经在你引以为豪的多个方面超过了你。
===== Unix =====


Unix 的创造者们是跟 Knuth 非常类似的权威，他们在我的心目中也曾经占据了重要的位置，以至于十年前我写了一篇文章叫《完全用 Linux 工作》，大力鼓吹 Unix 的“哲学”，甚至指出 Linux 不能做的事情就是不需要做的，并且介绍了一堆难用的 Unix 工具，引得很多人去折腾。可如果你知道我现在对 Unix 的态度，肯定会大吃一惊，因为在经过努力之后，我成功的“忘记”了 Unix 的几乎一切，以至于本科刚毕业的学生都会以为我是脑盲，并且以为可以在我面前炫耀自己知道的 Linux 技巧。他们不会明白，在我心里 Unix/Linux 的设计是计算机软件界目前面临的大部分问题的罪魁祸首，而他们显示给我看的，只不过是 Unix 的思想和精英主义给程序员造成的精神枷锁。其实我并不会忘记 Linux 的设计，但我已经下意识的以熟悉 Linux 的奇技淫巧为耻，所以很多时候我即使知道也要装作不知道。因为我是机器的主宰，而不是它的奴隶，所以我总是想办法让机器去帮我做更多的事，帮我记住那些无聊的细节，而不是去顺从它的设计者所谓的“哲学”。

评论 Unix 和它的后裔们总是一件尴尬的事情，因为你提到它们的任何一个缺点，都会被很多人认为是优点。GNU 的含义是“GNU is Not Unix”，但很可惜的是 GNU 和 Linux 的设计从来没有摆脱过 Unix 思想的束缚。Unix 的内存管理，进程，线程，shell，进程间通信，文件系统，数据库…… 几乎都是很蹩脚的设计。所谓的“Unix 哲学”，也就是进程间通信主要依靠无结构字符串，造成了一大批过度复杂，毛病众多的工具和语言的产生：AWK，sed，Perl，…… Unix 的内存管理是按“页”而不是按“结构”分配，相当于把内存分配的任务完全推给应用程序。而且允许任意的指针操作，这就像给每个老百姓一把爱走火的枪。可是又想要“安全”，自相矛盾。没办法，不得不强制进程数据空间完全隔离，使得进程间无法直接传递数据结构。进程和线程上下文切换开销过大，造成了使用大规模并发或者分布式计算的瓶颈，导致了 goroutine 和 node.js 等“变通方法”的产生。把数据无结构的存储在文件里，无法有效的查找数据，造成了关系式数据库等过度复杂的数据解决方案的产生。再加上后来 WEB 的设计，现在的网站基本上就是补丁加补丁，一堆堆的 hack。

“Unix 哲学”貌似也有好的部分，比如“每个程序只做一件事，多个程序互相合作。”然而，这个所谓的哲学其实就是程序语言（比如 Lisp）里面的模块化设计。它当然是好东西，然而这些思想被 Unix 偷来之后，有其名而无其实。很少有 Unix 程序真正只做一件事的，而且由于字符串这种通信机制的不可靠，它们之间其实不能有效地合作。有时候你换了一个版本的 make 或者 sed 之类的工具，你的 build 就莫名其妙的出问题。这就是为什么有的公司请了专门的所谓“build engineer”，因为高级别的程序员不想为这些事情操心。Lisp 程序员早就明白这个道理，所以他们尽一切可能避免使用字符串。他们设计了 S 表达式，用于结构化的传输数据。实际上 S 表达式不是“设计”出来的，它是每个人都应该首先想到的，最简单的可以表示树结构的编码方法。Lisp 的设计原则里面有一条就是：Do not encode。它的意思是，尽量不要把有用的数据编码放进字符串。Unix 的世界折腾来折腾去，XML，CORBA，…… 最后才搞出个 JSON，然而其实 JSON 完全不如 S 表达式简单和强大。Unix 就像一个脑瘤，它让人们放着最好的解决方案几十年不用，不断地设计乌七八糟的东西用来取代乌七八糟的东西。这些垃圾对人有很大的洗脑作用。前段时间我说 S 表达式比 JSON 简单，有人居然跟我说 JSON 好些，因为它结构的 field 是“无顺序”的。这让我相当无语，因为一个编码方式有没有顺序完全取决于你如何解释它。从这个意义来讲，S 表达式可以是有顺序，也可以是没有顺序的。

Unix 喜欢打着“自由”和“开源”的旗号，可是它的历史却充满了政治，宗教，利益冲突和对“历史教科书”的串改。几乎所有操作系统课本的前言都会提到 Unix 的前身 Multics，而提到 Multics 的目的，都是为了衬托 Unix 的“简单”和伟大，接下去基本上就是按部就班的讲 Unix 的设计，仿佛 Unix 就是世界上唯一的操作系统一样。 课本会告诉你，Multics 由于设计太复杂，试图包罗万象，最后败在了 Unix 手下。可是如果你仔细了解一下 Multics 的历史，就会发现最后一台 Multics 机器直到 2000 年还在运行，拥有 Unix/Linux 到现在还没有的先进而友好的特性，并且被它的用户所爱戴。Multics 的设计并不是没有问题（对比一下 Lisp Machine 和 Oberon），但是相比之下，Unix 的设计一点都不简单。Unix 抄了 Multics 最好的一些思想，有些没有抄得像，然后又引入了很多自以为聪明的糟粕。可是 Unix 靠着自己病毒一样的特征，迅速占领了市场。Unix 最开头是开源和免费的，但是后来 AT&T 发现这里面有利可图，所以就收回了使用权，并且开始跟很多人打官司。AT&T 的邪恶比起微软来，真是有过之而无不及。

Unix 的很多设计是如此龌龊，很多人却又由于官僚的原因不得不用它。以至于 Unix 出现的早期怨声载道，有人甚至组织了一个 mailing list 叫“Unix 痛恨者”(Unix Haters)。你很有可能把这些人当成菜鸟，可是这些人其实都用过更好的操作系统，有的甚至设计实现过更好的操作系统甚至程序语言。最后他们的叫骂声被整理为一本书，叫做 Unix Hater's Handbook。让人惊讶的是，这本书有一个“反序言” (anti-foreward)，作者正是 Unix 和 C 语言的设计者之一，Dennis Ritchie。这个反序言说，Unix 这座设计缺乏一致性的监狱会继续囚禁你们，聪明的囚犯会从它里面找到破绽，可惜的是自由软件基金会（FSF）会建造跟它完全兼容的监狱，只不过功能多一些。拥有三个 MIT 学位的记者，微软的研究员，Apple 的高级科学家可能还会对这座监狱的“规矩”贡献一些文字。从这些文字里，我看到了一个炫耀武力的暴君，看到了赤裸裸的权威主义和教条主义。

可惜的是在软件的世界里任何糟糕的设计都可以流行，只要你的广告做得好，只要你的传教士够多。一知半解的人（比如十年前的我）最喜欢到处寻找“新奇”的东西，然后开始吹嘘它们的种种好处，进而成为它们的布道者。再加上大学计算机系的“紧跟市场”的传统，不幸的事情发生了：Unix 和它的后裔们几乎垄断了服务器操作系统的市场。由于 Unix 的垄断，现在的软件世界基本上建立在一堆堆的变通之上，并且固化之后成为了“珍珠”。公司里，学校里，充满了因为知道一些 Unix 的“巧妙用法”而引以为豪的人，殊不知他们知道的只是回避一些蹩脚设计的小计俩。程序员有太多的特例和细节需要记忆，不但不抱怨，还引以为豪。很少有人想过如何从根本上解决问题，历史的教训很少有人吸取，以至于几十年前犯过的设计错误还在重现。Unix 的最大贡献，恐怕就是制造了大量的工作岗位—因为问题太多太麻烦，所以需要大量的人力来维护它的运行。

现在看来，Unix 当初就是依靠《皇帝的新装》里织布工的办法封住了大家的嘴。皇帝的织布工们说：“愚蠢或者不称职的人都看不见这件衣服。”Dennis Ritchie 说：“Unix 是简单的，但只有天才才能理解这种简单。”看出来了吗？你不敢说 Unix 的设计太乱太复杂，因为这话一出口，立马会有人引用 Dennis 的话说，是你自己不够天才，所以不理解。当然了，这就意味着他比你聪明，因为只有天才才能理解这种简单嘛。哎，这种喜欢显示自己会用某种难用工具的人实在太多了。你不敢批评这些工具对用户不友好，因为你立即会被鄙视为菜鸟。

Dennis Ritchie 去世了。死者长已矣，可是有些他的崇拜者在那个时候还要煽风点火，拿他的死与 Steve Jobs 的死来做对比，把像这样的照片四处转帖，好像 Steve 死错了时间，抢了 Dennis 的风头似的。然后就有人写一些这样的文章，把世界上的所有系统，所有语言都归功到 Dennis 和 Unix 身上。看到这些我明白了，所谓的“天才”就是这样被造出来的。在我看来这些是很滑稽的谬论，就像是在说有人拿一把很钝的剪刀做出了一件精美的衣服，所以这剪刀立下了汗马功劳。其实这人一边裁布一边在骂这剪刀，心想妈的这么难用，快点做出这衣服，卖了钱买把好点的！

用了这么久 Apple 的产品，平心而论，虽然它们并不完美，然而它们并不是 Unix 的翻版，它们做出了摆脱 Unix 思想束缚的努力。它们本着机器为人服务的原则，而不是把人作为机器的奴隶。Mac 的很多内部设计跟 Unix 有着本质的不同。然而就是这样的系统，被 Dennis Ritchie 在他的反序言里面蔑称为“以 Sonic the Hedgehog 作为智力主题和交互设计基础的系统”。

有谁知道，在那同样一段时间里，Lisp 的发明者 John McCarthy，ML 的发明者 Robin Milner，都相继去世了呢？那个时候我只是在 mailing list 看到有人发来简短的消息，然后默默地思念他们给我带来的启迪。我们没有觉得 Steve Jobs 的死抢了他们的风头，因为他们不需要风头。死就是要安安静静的，让知己者默哀已经足矣。出现这种事情恐怕不能怪 Dennis Ritchie 自己，然而这些 Unix 的崇拜者们，真的应该反省一下自己的做法了。

Unix 的设计者们曾经在我的心里占据了一席之地，可是现在觉得他们其实代表了反动的力量，他们利用自己的影响力让这些糟糕的设计继续流传，利用人们的虚荣心，封住大部分人的嘴，形成教条主义，让你认为 Unix 的设计是必须学习的东西。很多人成为了 Unix 的传教士和跟屁虫，没有什么真实水平，就会跟着瞎起哄，把 Unix 设计者的话当成教条写进书里。可是他们的权威和名气是如此之大，让我在很多人面前只能无语。
===== Go 语言 =====


现在，同样这帮 Unix “大牛”们设计了 Go 语言，并且依仗自己的权威和 Google 的名气大力推广。同样的这帮跟屁虫开始使用它，吹捧它，那气势就像以为 Go 可以一统天下的样子。真正的程序语言专家们都知道，Go 的设计者其实连语言设计的门都没摸到。这不是专家们高傲，他们绝不会鄙视和嘲笑一个孩子经过自己的努力做出一个丑陋的小板凳。他们鄙视，他们嘲笑，因为做出这丑陋小板凳的不是一个天真的小孩，而是一些目空一切的人，依仗着一个目空一切的公司。他们高举着广告牌，试图让全人类都坐这样丑陋的板凳。

跟当年设计 Unix 时一个德行，不虚心向其它语言和系统学习经验教训，就知道瞎猜瞎撞。自己想个什么就是什么，但其实根本就不知道自己在干什么。把很多语言都有的无关紧要的功能（比如自动格式化代码）都吹嘘成是重大的发明，真正重要的东西却被忽略。Go 语言的设计在很多方面都是历史的倒退，甚至犯下几乎所有其他语言都没有的低级错误。在语法上大做花样，却又搞得异常丑陋，连 C 和 Java 都不如。自己不理解或者实现难度大点的东西就说是不需要的，所以连很多语言支持的 parametric type（类似 Java generics）都没有，以至于没法让程序员自定义通用数据结构，只好搞出一堆特例（比如 map，make，range）来让程序员去记。这些做法都跟 Unix 如出一辙。

Go 语言最鲜明的特征就是 goroutine，然而这个东西其实每个程序语言专家都知道是什么。有些语言比如 Scheme 和 ML 提供了 first-class continuation（call/cc），可以让你很容易实现像 goroutine 这样的东西，甚至实现硬件中断的“超轻量线程”。至于 Go 那种“基于接口”的类型系统设计，我在很多年前就已经试验过，并且寄予了很大的希望。结果最后经过很多的研究和思索后发现有问题，于是放弃了这个想法。很显然，我不是第一个在这个问题上失败的人，很多语言专家在使用 parametric type 以前都试图过做这种基于接口的设计，结果最后发现不是什么好东西，放弃了。然而 Go 的设计者却没有学到这些失败教训，反而把它当成宝贝。一个很显然的问题是，在 Go 里面你经常会需要使用“空接口”（interface{}），用来表示所有类型。这就像使用 C 的 void 指针一样，有着静态类型系统的麻烦，却失去了静态类型系统的好处。

每当你提到 Go 没有 parametric type，Go 的拥护者们就说“我看不到这有什么用处”，就像一些非洲土著跟你说“我看不到鞋子有什么用处”一样。他们利用人们对 Java 的繁复和设计模式的仇恨，让你抛弃了它里面的少数好东西。其实 Java generics 不是 Java 首先有的。它的主要设计者其实包括 Haskell 的设计者之一 Philip Wadler。这种 parametric type 很早就出现在 ML，Haskell 等语言里面，是非常有用的东西。

每当受到批评，Go 的拥护者们就托词说，Go 是“系统语言”（systems language）。这里潜在的前提就是，认为 Unix 就是唯一的“系统”，而 C 就是在 Go 以前唯一的“系统语言”，好像其他语言就写不出所谓的“系统”似的。而事实是，在 C 诞生十年以前，人们就已经在用 Algol 60 这样的高级语言来写操作系统了。由于先天不足却又大力推广，所以 Go 的很多缺陷基本已经没法修补了。这样的语言一旦流行起来就会像 Unix 一样，成为一个无休止的补丁堆。如果像 Java 或者 Haskell 这样的语言还值得批评的话，对 Go 语言的设计者我只能说，去补补课吧。
===== Cornell =====


可是权威和名气的威力还是很大的。虽然 Knuth 在我心目中的位置不再处于“垄断地位”，世界上可以占据我心里那个位置的人和事物还很多。在离开清华之后我申请了美国的大学。也许是天意也许是巧合，只有两所大学给了我 offer：Cornell 和 Indiana，而我竟然先后到了这两所大学就读。

说实话，Indiana 给了我比 Cornell 更好的 offer。Cornell 给我的是一个 TA 的半工读职位，而 Indiana 给我的是一个不需要工作白拿钱的 fellowship。说实话我从来没有搞明白 Cornell 这样的“牛校”怎么会给我这样的人 offer，GPA 一般，paper 很菜，而 Indiana 却是真正在乎我的。Indiana 的 fellowship 来自 GEB 的作者 Doug Hofstadter。他从 email 了解到我的处境和我渴求真知的愿望之后，毅然决定给我，一个素不相识的人写推荐信。后来我才发现那 fellowship 的资金也是他提供的。

可是 Indiana 和 Hofstadter 的名气哪里能跟 Cornell 的号称 “CS前五” 相比啊？Indiana 的 offer 晚来了几天。当收到 Indiana 的 offer 时，我已经接受了 Cornell。Hofstadter 很惊讶也很失望，因为他以为我一定会做他的学生，可是听说我接受了 Cornell 的 offer，他也不知道该怎么办。我只隐约的记得他告诉我，学校的排名并不是最重要的东西……

名气和权威的力量是如此之大，它让我不去选择真正欣赏我并且能给我真知的人。有时候回想起来，我当时真的是在寻找真知吗？我明白什么叫做真知吗？

Cornell 给了我什么呢？到现在想起来，它给我的东西恐怕只有教训，很多的教训。TA 的工作可不是那么好做的，基本就是苦力，你甚至会怀疑他们录取你就是为了利用你的廉价劳动力。我第一次做 TA 就是一个 200 多人在阶梯教室上的大课，教最基本的 Java 编程。虽然有好几个 TA，但任务还是很繁重。讲课的人不是教授，而是专职的讲师。这种讲师一般得靠本科生的好评来谋生，所以虽然在学术上没什么真本事，对学生真可谓是点头哈腰，服务周到。这就苦了各位 TA 了，作业要你设计，还要设计得巧妙，要准备好标准答案，之后还要批作业，批得你头脑麻木，考试要监考，之后还要批试卷。每周还得抽好几个小时来做 office hour，给学生答疑。然后你还有自己要上的课，自己的作业，自己的考试。每当考试的时候都很紧张，因为你得准备自己的考试，还要为学生的考试多做很多工作。

如果真的学到了东西，这么辛苦也许还值得，可是那些教授真的是想教会你吗？有人打了个比方，说 Cornell 说要教你游泳，就把你推到水池里，任你自己扑腾。当你就要扑腾上岸时，他在你头上用榔头一砸，然后继续等你上岸。当你再次快要扑腾上岸时，他又举起一块大石头扔到你头上，这样你就可以死了，可是 Cornell 仍然等着你游上岸…… 这就是对我在 Cornell 的经历的非常确切的比喻。

我在一篇老的博文里面提到过，Cornell 的学生，包括博士生，一上课就抄笔记，一天到晚都在赶作业。可其实 Cornell 不只是爱抄笔记的学生的天堂，而且是崇拜权威者的天堂。即使你不是那么的崇拜权威，你不可避免的会被一群像朝圣者一样的人围在中间，在你耳边谈论某某人多么多么的牛。不管你向同学打听哪一个教授，得到的回答总是：“哇，他很牛的！” 然后你就去上了他的几节课，觉得不咋的嘛，可是人家就说那是因为你不理解他的价值。这种气氛我好像在另一个地方感觉到过呢？啊对了，那是在 Google。这样的气氛也许并不是偶然，Cornell 的大部分 PhD 同学当时的最大愿望，就是毕业后能去 Google 工作。当然，后来 Facebook 上升成为了他们的首选。值得一提的是，Indiana 其实是更有个性的地方。我在 Indiana 的同学们一般都把去 Google 工作作为最后的选择之一。有一次一个刚来不久的学生问，如何才能进入 Google 工作？有个老教授说，那个容易，Google 招收任何能做出他们题目的人！

Cornell 的研究可以用“与时俱进”来形容，什么热门搞什么。当时 Facebook 和社交网络正在“崛起”，所以系里最热门的一个教授就是研究社交网络的。我去听过他几堂课，他用最容易的图论算法分析一些社交网络数据，然后得出一些“理论”。其中好些结论实在太显然了，我觉得街上的卖菜大妈都能猜到，还不如研究星际争霸来得有意思点。可是 Facebook 名气之大，跟着这位教授必然有出路啦，再加上有人在耳边煽风点火，所以有好多的学生为做他的 PhD 挤破了头皮，被刷下来的就只好另投门路了。每次新来一个教授都会被吹捧上天，说是多么多么的聪明，甚至称为天才。然后就有一群的人去上他的课，试图做他的学生。结果人家每节课都是背对学生面朝黑板，喃喃自语，写下一堆堆的公式和证明，一堂课总共就没回过几次头。下面的人当然是狂抄笔记，有的人甚至带着录音笔，生怕漏掉一句话。上这样的课还不如干脆把板书打印出来让大家自己回家看。人多了竞争也就难免了。上课的同学们就开始勾心斗角，三国演义的战术都拿出来了。作业做不出来就来找你讨论，等你想讨论了就说自己也没做出来。没听懂偏要故作点头状，显得听懂了，让你觉得有压力。自己越是喜欢的教授就越是说他不咋的，扯淡，然后就自己去跟他。自己不喜欢的教授就告诉你他真是厉害啊，只可惜人家不要我。直到两年后我离开 Cornell 之前，还有好些同学因为没找到教授而焦头烂额。因为两年内没有找到导师的 PhD 学生，基本上等于必须退学。

当我离开 Cornell 之后，有一位国内的学生给我发 email 套磁（从系里主页上找到我的地址），问我 Cornell 情况如何。我告诉他我都已经走人了，并且告诉了他我的感觉，一天到晚抄笔记赶作业之类的。然后又问我一个刚毕业的 PhD 的情况，我说他水平不咋的，博士论文我看过了，很扯淡，解决一个根本不存在的问题。他对我说的话有点惊讶，但还是将信将疑。为了确保万无一失，他在 visiting day 的时候专程去 Cornell 考察了一下。回去又给我 email，说见到好多牛人啊，大开眼界，哪里像你说的那么不堪。还说跟那位 PhD 的导师谈过话，真是世界级的牛人那，他的博士论文也是世界一流的。我就无话可说了，仁者见仁，智者见智，随他去吧，哎。

结果两年之后，我又收到这位同学的 email，说他在 Cornell 还没找到导师，走投无路了，问我有没有办法转学。
===== 图灵奖 =====


说到这里应该有人会问这个问题，我是不是也属于那种没找到导师走投无路的人。答案是，对的，我确实没有在 Cornell 找到可以做我导师的人。然后我就猜到有人会说，就知道王垠水平不行嘛，没搞定导师，被迫退学，哈哈！可是事情其实没他们想象的那么简单。作为一个 PhD 学生，不仅必须精通学术，而且要懂得政治和行情。哦错了，其实不精通学术也行的，但是一定要懂得政治和行情！可是由于学生之间的窝里斗，他们之间的信息互通程度，是没法和教授之间的信息互通程度相比的。这就造成了“学生阶级”在这场信息战上的劣势，总是被动的被教授挑选，而不能有效地挑选适合自己的教授。

进入 Cornell 之后我上了一门程序语言的课，就开始对这些东西入迷。可是由于“与时俱进”，Cornell 的研究方向并不是那么平衡的发展的，其实是很畸形的发展。程序语言领域的专家们早已因为受到忽视而转移阵地，剩下一群用纸和笔做扯淡理论的。说实话，在历史上程序语言方向曾经是 Cornell 的强项，出现了一些很厉害的成果。可是当我在 Cornell 的时候，只剩下两个名不见经传的教员，一个助理教授，一个副教授。其实 Robert Constable 也在那里，可惜的是他做了 dean 之后已经没空理学生了，以至于我两年之后都不知道这个人的存在。我当时也不知道 Cornell 有过这段历史，看不到它的研究重心的移动趋势。

我不喜欢那个副教授搞的项目，大部分是在 Java 上面加上一些函数式语言早就有的功能。可是人家做的是热门语言，所以拉得到资金，备受系里亲睐，他的学生们也比较趾高气昂。初次见面的时候，我跟他的一个学生说了我的一个想法，他说：“你那也能叫研究吗？待会儿我给你看看什么是真正的研究！” 其实那只是我的一个微不足道的想法，我也没说那是研究啊。只是随便聊一下而已就这么激动 -_- 何况你们那些 Java 的东西能算是研究？我是不可能跟那样的人合作的，所以我就跟那个助理教授做了一点静态分析的项目。当然我们分析的也不是什么好东西，是用 Fortran 写的 MPI 程序。不过说实话，那个助理教授其实挺有点真知灼见，他有几句话现在仍然在指引我，防止我误入歧途。其中一句话是针对我对 π-calculus 的盲目崇拜 说的：“那些理论其实不管用的。最好是针对自己的问题，自己动脑筋想。” 他也是很谦虚很善良的人，可是好人不一定有好报的。后来他没有拿到 tenure 职位，不得不离开 Cornell 加入了工业界，而我就失去了最后一个有可能在程序语言方向做我的导师的人。

没办法，我就开始探索其它相关领域的教授，比如做数据库的，做系统的，看他们对相关的语言设计是否感兴趣。可惜他们都不感兴趣，而且告诉我程序语言领域太狭窄了。我当时还将信将疑，甚至附和他们的说法，可是现在我断定他们都是一知半解胡说八道。如果这些人虚心向程序语言专家请教，现在数据库和操作系统的设计也不会那么垃圾，关系式，SQL，NoSQL，…… 一个比一个扯淡。没有办法，我就开始探索其他的方向，开始了解图形学和数值分析等东西，进展很不错。可是终究我还是发现，我不喜欢图形学和数值分析所用的语言。我想制造出更好的程序语言来解决这些问题。可是跟教授们谈这些想法的时候就感觉是在对牛弹琴，他们完全不能理解。后来我发现，教授们貌似不喜欢有自己想法的学生，他们更希望找到愿意“打下手”的学生，帮助实现他们自己的想法。

这就让我走到了跟那位向我打听 Cornell 情况的同学差不多的局面，真是心里有许多的苦却没有人可以理解。这时候我想到了系里的一些德高望重的教授，比如得过图灵奖的人，也许这些顶级的大牛会给我指出方向。于是我就联系到一位图灵奖得主，说想找他聊聊。我说我感兴趣的东西 Cornell 貌似并不重视和发展。Cornell 的校训是“any person, any study”，而我想 study 的东西却得不到支持。最后我谈了一下我对 Cornell 的总体感受。我说我觉得大家上课死记硬背，不是很 intellectual，我不是很确定学术界是否还保留有它原来的对智慧和真知的向往。

我很诚恳的告诉了他这些，只是希望得到一些建议。结果他不但没有理解任何一点，而且立马开始用质问的语气问我，你成绩怎么样？考试都通过了没有？哎，说白了就是想搞清楚你是不是成绩不好没人要。怎么就跟高中教导主任一样。于是乎那次谈话就这样不了了之。可是没有想到，这次谈话就造成了我最后的离别。在学生们互相之间勾心斗角，不通信息的同时，系里的教授们其实背后都是“通气”的。他们根本不懂得如何教学，就知道拿作业和考试往学生头上砸，幸存下来的就各自挑去做徒弟，挨不住的就打发掉。这算盘打得真是妙啊。我也不知道他们是什么机制，每个学生对哪些教授感兴趣，表现如何，他们貌似都了如指掌，貌似背后有个什么情报网。然后系里的教授们不知道怎么的，仿佛就都知道有这样一个不知趣的学生，居然敢说学术界的坏话！

大地震前夕的天空总是异常的美。我竟然在过道里看到那位图灵奖教授对我点头致意并且微笑，以前做 TA 时把我呼来唤去还横竖不满意的教授也对我笑脸相迎。我仿佛觉得那一席话打动了那位德高望重的教授，再加上在图形学和数值计算的扎实进展，也许我的学术生涯有了转机。可是，我那一次真正的领悟了什么叫做所谓的“笑里藏刀”。

由于那个学期上的图形学还有矩阵计算的课成绩都不错，我心想应该能找这两门课的授课教授的其中一个做导师吧。再加上那些貌似友好的笑容…… 所以没想很多，居然过了一个非常快乐的寒假。没有任何前兆，没有任何直接的通知（email，电话），一封纸信不知道是什么时候默默地进到了我在系里的“信箱”—一个我基本上从来不看的，系里用来塞广告信息的信夹子里，直到下一个学期开始的时候（2月份）我才发现。信是系主任写的，大概就是说，由于你的表现，我们觉得 Cornell 不是适合你的地方……

说得对，我也觉得 Cornell 不适合我。我本来就有想走的意思，可我一般呆在一个地方就懒得动。如果你们早一点告诉我这个，比如12月以前，我还可以申请转学到其它学校。可是都 2 月份了才收到这样的东西，Cornell 啊 Cornell，你让我现在怎么办？我想我可以说你不仁不义吧？

在这个万分窘迫的时候，我想起了曾经关心过我却又很失望的 Hofstadter。我告诉他我在 Cornell 很不开心，我很想研究程序语言，可是 Cornell 不理解也不在乎这个领域。他回信说，没有关系，你能找到自己喜欢的东西就应该去追寻它。Indiana 的 Dan Friedman 正好是做程序语言的，你可以联系他，就说是我介绍你去的。

于是给 Friedman 发了 email，很快得到了回信说：“Yin，两年前我们都看过你的材料，我们觉得你是非常出众的学生，可惜你最后没有选择我们。你要明白，人生最重要的事情不是名利，而是找到你愿意合作的人。你的材料都还在我们这里。现在招生已经快结束了，但是我会把你的材料提交给招生委员会，让他们破例再次考虑你的申请。” 我和 Dan Friedman 的故事就从这里开始了。

我在 Cornell 的遭遇貌似不可告人的耻辱和秘密，然而我今天却可以把它公之于世，因为 Cornell 不再有任何资格来评价我。依靠自己的努力和 Indiana 的老师们的培养，我的水平已经超越了 Cornell 计算机系的大部分教授。现在我觉得自己就像那个到 Cornell 学“游泳精髓”人，本来就是会游泳的，可是每到岸边 Cornell 就搬起大石头来砸我，还说我不会游。于是我钻到水底下钻了一个洞，把水放干。

由于曾经与多位图灵奖得主发生不大愉快的遭遇，再加上在自己的研究中多次受到其它图灵奖得主的理论的误导，而且许多位图灵奖得主最主要的贡献仍然在给软件行业带来混乱，图灵奖这个被许多计算机学生膜拜的神物，其实在我心里已经没有任何效力了。很多人可能对此难以想象，可是对图灵奖是这种态度的不只我一个人。我认识的几乎所有程序语言专家几乎都不拿图灵奖当回事，而且其中很多人甚至不拿图灵本人当回事，觉得他设计了一些非常丑陋的东西。虽然我现在觉得图灵的研究成果确实有一定价值，但由于上面的原因，拿图灵奖来开玩笑还是成为了我的家常便饭。我甚至觉得 ACM 应该停发这个奖，因为它是一种非常虚幻和政治的东西。每当人们谈起这些“大奖”煞有介事的时候，就让我看到了他们的愚昧。
===== 常青藤联盟和“世界一流大学” =====


我在 Cornell 的经历应该不是偶然，不是因为我比较特殊。跟我同时进入 Cornell 的博士生有好几个没有拿学位就离开了。其中有一个是非常聪明的少年班，18岁就读 PhD 了，我根本听不懂的理论课他还能拿A。可是四年后他退学去了 Facebook，说真是太难毕业了，神马都是扯淡。有些本科生也告诉我类似的经历，说被一个叫做“笑面虎”的教授“整了”。Cornell 的自杀率居美国大学前列。离开以后的有一天，忽然看到新闻报道说一周之内有三个 Cornell 学生从瀑布旁边的那座桥跳下去，结果派了警察在桥上日夜巡逻。我觉得自己在 Cornell 所感受到的压力确实超乎想象，是有可能把人逼上绝路的。现在回想起来真是可笑，因为下意识里在乎权威和名气，我给予了一群根本没有资格来教育我的人莫大的权力，让他们可以向我施加无端的压力。

应该指出，这种现象应该不是 Cornell 所特有的。我对清华，还有 Princeton，Harvard，MIT，Stanford，Berkeley，CMU 等学校的学生都有了解。这些所谓的“世界一流大学”或者“世界一流大学 wannabee”差不多都是类似的气氛。你冲着它们的名气和“关系网”挤破了头皮进去，然后就每天有人在你耳边对其它人感叹：哇，他好牛啊！发了好多 paper，还得了XX奖。跟参加传销大会似的，让你怀疑这些人还有没有自尊。然后就是填鸭式的教育，无止境的作业和考试，让你感觉他们不是在“教育”你，而是在“筛选”你。这种筛选总是筛掉最差的，但也筛掉最好的。因为最好的学生能意识到你在干什么，他们不给你筛选他们的机会。一旦发现其实没学到东西，中途就辍学出去创业了。所以剩下来的就是最一般的，循规蹈矩听话的。在这样的环境里，你感觉不到真正的智慧和真知的存在。GRE 考试所鼓吹的什么“批判性思维”（critical thinking ）在美国大学里其实是相当缺乏的。学生们只不过是在被培训成为某些其他人的工具，他们具有固定的思维定势，像是一个模子倒出来的。他们不是真正的创造者和开拓者。

人们在这些大学里的时候都是差不多感受的，可是一旦他们出来了，就会对此绝口不提。自己身上挂着这些学校的镀金牌子，怎么能砸了自己的品牌，长别人的威风？所以每当我批判 Cornell 就有些以前的同学一脸的着急相，好像自己没有吃过那苦头一样。
===== 程序语言专家 =====


虽然我在 Indiana 得到了思想的自由，但这种自由其实是以孤独为代价的。我并不是一个自高自大不合群的人，但是我不喜欢跟一群像追星族一样的人在一起。应该说在 Indiana 的日子里，权威主义的影子也是经常出现的。Indiana 学生们的权威比较特殊一点，不然就是 Dan Friedman，不然就是 Kent Dybvig。Friedman 的身边总是围绕着一群自认为是天才的本科生，喜欢拍他的马屁，喜欢在人面前炫耀。博士生们开始时貌似还比较酷，可是后来发现其实也有很多类似现象，急于表现自己，越是研究能力弱的人越是爱表现。所以你就发现有人开头为了混进这个圈子拍你的马屁，过了两年就开始自高自大，而且经常想这样来压倒你：“Kent 说过……”我很尊敬 Dan 和 Kent，但我其实在很多方面已经超越了他们。我看到他们的一些思维方式并不是那么的正确，我也从来不引用他们的话作为理论依据。对权威的崇拜其实显示了一个人心理的弱小。如果你对自己有信心，有自己的想法和判断力，又何必抬出个名人来压制别人呢？

在我自己心里毫无疑问的是，我是 Indiana 最厉害的程序语言（PL）学生。由于我不断地动手尝试新的想法，所以几乎没有任何其他人的研究逃脱过我的探索。我从来不记录自己的半成品和失败（因为太多了），而且我对自己的标准异常的高，所以我经常看到有人做演讲或者写论文，里面其实是我很久以前尝试过又抛弃了的想法。有时候我去听别人的演讲，就会立即看出破绽，问一些演讲者答不出来的问题。其实很多时候我只是怀疑自己，我试图给那些想法再一次的机会来证明它们的价值，而且问得相当委婉，但那样的问题仍然是不受欢迎的，所以同学们甚至一些助理教授看到我在场都是心惊胆战的。吃饭的时候我也不喜欢旁边的人讨论问题，因为他们经常显示出对理论提出者的膜拜心理，而且煞有介事，可惜那些经常是我早就知道不管用的理论。他们有时候其实也知道那些是扯淡的，但却又怕我捅破这窗户纸，所以就像鸵鸟一样把头埋在沙子下面。

我也想合群一点，但是屡试不爽，所以后来我就基本是孤立的做自己的研究了。最开头是不得已，但后来就越来越喜欢独自一人。这是不可避免的，因为创造力和孤独几乎是双胞胎。因为免去了跟人讨论的时间，我有了大把的时间来做自己的探索。然后我才发现当年期望的那种 common room 其实没什么用，因为那里根本不会有人理解你在说什么。现在即使有这样的地方我也不会去了。

我从一开始进入 Indiana 就没想过要拿博士学位，我只是在玩弄这个系统以达到我求知的目的。所以除非危及到我的存在，我把学校对学位的各种要求都抛到了九霄云外。给教授做 RA 几乎总是被要求研究各种毫无前途的东西，与我自己的思考相冲突，所以我后来干脆都做 TA 了。虽然累点，但不怎么费脑力。其结果是，在短短的一两年时间之内，我利用自己抠出来的时间，独自摸索出了这个领域大部分的理论。我经常不看书不看论文，在一个星期之内解决别人十多年才完成的研究。让人惊讶的应该不是我有多么聪明，而是这些研究者们十年来到底在干什么。我从来不认为自己比别人聪明，我只是觉得很多人的脑子被禁锢了而已。我有非常简单的头脑，我看不懂复杂的公式，听不懂高深的术语。可正是因为这一点，让我脱离了已有理论的困扰。

可以说，这个领域在过去一个多世纪的研究，很少有逃脱过我的洞察力和直觉的。这些研究最早可以追溯到 1870 年代。我一般很少看论文，因为自己想清楚一个问题其实花不了那么多时间的。看别人的论文一般都枯燥乏味，所以与其花那么多时间读论文还不如自己思考。当我看论文的时候，一般是想搞清楚自己琢磨出来的问题有没有人已经研究过了，所以很多论文只需要扫一下就够了。我看到一个东西一般很快就会知道它到底会不会管用。我经常发现一些被认为很艰深的理论其实是在解决根本不存在的问题，甚至是在制造问题，而真正的问题却没有得到有效的解决。很多问题其实是权威的阴影造成的，它让人们不敢否认这些大牛思想的价值，不敢揭穿它们，抛弃它们，甚至想让自己寄生在它们上面，所以很多的时间花在了解决一些历史遗留问题，而不是真正的问题。这就是为什么我的英文 blog 标题叫做“Surely I Am Joking”，因为它记录了一些我认为根本不存在，或者是人为造成的问题。
===== 逻辑学家 =====


批评 PL 领域的问题并不意味着其它领域就好一些。恰恰相反，我认为做系统和数据库的领域有更大的权威崇拜和扯淡的成分。有时候程序语言专家看起来很明显的问题，做数据库和操作系统的人却看不到，扯来扯去扯不清楚，还自以为是的认为 PL 的东西他们都懂。

程序语言的理论是计算机科学的精髓所在，可是程序语言专家有他们自己的问题：他们膜拜逻辑学家。几乎每一篇 PL 领域的论文，至少有一页纸里面排列着天罡北斗阵一样的稀奇古怪的逻辑符号，而它们表示的其实不过是一些可以用程序语言轻松做出来的解释器和数据结构。有人（比如 Kent Dybivg）早就发现了这个规律，所以写了一些工具，可以把程序语言自动转换成 LaTeX 格式的逻辑公式，用以对付论文的写作。

有人觉得那些公式有“数学的美感”，可是它们其实是挺有毛病的设计。如果你看看现代逻辑学鼻祖 Gottlob Frege 的原著，就会发现其实最早的时候逻辑学不是用公式表示的。Frege 那篇开创性的论文 Begriffsschrift 里面全都是像电路图一样的图片，只有 20 多页，而且非常容易读懂。不知道是哪一个后辈把电路图改成了一些稀奇古怪的符号。其实他的目的是用符号来表示那些电路图，结果到后来徒孙们以为那些符号就是祖传秘籍的精髓，忘记了那些符号背后的电路图，所以导致了今天的混乱局面。看完了 Frege 的论文，我再一次领悟到了之前那句话：跟真正的大师学习，而不是跟他们的徒弟。

ACM SIGPLAN 的主席 Philip Wadler 有一次写了一篇论文介绍 Curry-Howard corresponce，里面提到，好的点子逻辑学家总是比我们先想到。可是他却没有发现，其实程序语言的能力已经大大超越了数理逻辑，数理逻辑那些公式里面的 bug 其实不少。因为逻辑学家们不用机器帮助进行推理，有些问题搞了一百多年都搞不清楚是怎么回事，然后就弄出一些特殊情况和补丁来。有了一堆逻辑“定理”，却又不能确信它们是正确的，而且存在悖论一类无厘头的东西，所以又掰出一些 model theory 之类的东西来验证它们的正确性。逻辑学家们折腾了一百多年都是在折腾类似的事情，却没怀疑过老祖宗的设计。我之前提到的 Hindley-Milner 系统的问题，很大部分原因就在于它所使用的逻辑里面其实有一个根本性的误解。简言之，就是把全称量词 ∀ 随意乱放，导致输入与输出关系混乱。这也就是我为什么不喜欢 Haskell 和 OCaml 的最主要原因。

现在最热门的逻辑学家莫过于 Per Martin-Löf。他的类型理论 Martin-Löf Type Theory 被很多 PL 人奉为神圣。我一直没有搞清楚这个类型理论有什么特别，直到有一天我把 Martin-Löf 1980 年的那篇论文（其实是演讲稿）拿出来看了一遍。然后我发现他通篇本质上就是在讲一个 partial evaluator 要怎么写，而我早就自己写过 partial evaluator。其实并不是特别神奇的东西，只需要在普通解释器里面改一两行代码就行，可是有人（比如 Neil Jones）却为此写出了 400 多页的书和大量的论文。

之前提到的 Curry-Howard corresponce 也被很多人奉为神圣，它来自数学家 Haskell Curry 和逻辑学家 W.A. Howard 的一些早期发现。他们发现有些程序和定理的证明之间有对应的关系。然后就有 PL 专家开始走火入魔，说“程序就是证明，程序的类型就是定理”。可是他们却没有发现这个说法没法解释操作系统这种程序，因为它被设计为永远不停地运行，所以不能满足一个证明所具有的基本特征。而且很多程序被设计出来根本就不是要证明什么定理，它们是被设计来帮人做事情的。所以我觉得“程序就是证明”是很牵强附会的说法，你不能因为有的程序可以用来证明数学定理，就认为所有的程序都是某个定理的证明啊！把那句话反过来，说成“证明就是程序”还差不多。

但从以上的发现，我很高兴的看到了自己作为一个程序员的价值。很多人瞧不起程序员，把他们蔑称为“码农”，可是程序如果写好了，其实比起那些高深的逻辑学家和哲学家还要强，因为程序语言其实比数理逻辑还要强。有一位数学家说得好：为了真正深入的理解一个东西，你应该把它写成程序。还有人说，编程只是一门失传的艺术的别名，这门艺术叫做“思考”。我觉得很在理。
===== 再见了，权威们 =====


几经颠簸的求学生涯，让我获得了异常强大的力量。我的力量不仅来自于老师们的教诲，而且在于我自己不懈的追求，因为机会只亲睐有准备的头脑。

曾经 Knuth 是我心中唯一的权威，后来我又屈服于 Cornell 和常青藤联盟的权威和名气。在一而再再而三的上当受骗之后，我终于把所有的权威们从我的脑子里轰了下去。也许有时候轰得太猛烈了一些，但总的说来是有好处的。不再是我心目中的权威并不等于我鄙视他们或者不尊敬他们。我只是获得了不用膜拜他们，不用跟一群人瞎起哄的自由。我不尊敬的人都是一些自视过高的人或者他们的跟屁虫。一般来说，权威们在我的脑子里失去的只是他们在很多其他人脑子里的那种被膜拜的地位，那种你可以用“XX人说过……”来压倒理性分析的地位。现在他们在我心目中是一群普通的，由蛋白质形成的生物，有好心肠或者坏心眼的，高傲，谦虚或者虚伪的人。我不会自讨苦吃，他们的想法如果真的好，我当然要拿来用，但是没有任何人的东西我是不加批判全盘接受的。我深深地知道接受错误想法的危害性，所以我也希望大家都具有批判的思维，不要盲目的接受我说的话。我不喜欢“大神”或者“牛人”这种称呼，我也反感那种自称膜拜我的人，因为正是这种人让权威主义现在横行于世。

美国的权威主义胜于欧洲，但也不是每个人都那么的崇拜权威，而中国才是权威主义的重灾区。像“图灵奖得主XX”这样的称呼，恐怕只有在中国才见得到。所以我希望国内的同学们，不要盲目的崇拜国外的所谓“大师”，“牛校”或者“牛公司”。祝你们早日消灭掉心里的各种权威以及对他们的畏惧心理，认识到自己的价值和力量。
===== 后记（关于 IU） =====


有些人看了我的文章介绍在 IU 的经历，告诉我他们申请了 IU。我觉得有必要免责声明一下：我没想到，也不希望有人因为我的文章而去 IU，YMMV (your mileage may vary)。由于我有所准备，所以对于 Friedman 的教学如鱼得水。很多同学也说学到很多，可是有一些其他人告诉我他们觉得 Friedman 的课他们听起来很吃力，只能说是勉强过关。而且我只介绍了 IU 好的方面，却把不大好的地方一笔带过了。我在 IU 也有很艰难的时候。现在的情况是 Kent Dybvig 已经离开了 IU，加入了 Cisco。他的公司 Cadence Research Systems 和 Chez Scheme 也并入了 Cisco。Dan Friedman 由于年纪原因说不准还带不带学生。最近引进了一些貌似不错的助理教授，但是我跟他们都不熟。我的经验是助理教授一般都会为了研究资金，为了升为正教授而做一些身不由己的事情。其他的 CS 方向我都说不准 IU 是什么水平，所以还请同学们自己斟酌。我可以毫无疑问的一点是，IU 有非常美丽的校园，大大的超过清华，北大，Cornell，Stanford，MIT。

